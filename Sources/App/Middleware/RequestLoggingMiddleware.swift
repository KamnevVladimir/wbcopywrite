import Vapor

/// Middleware –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
struct RequestLoggingMiddleware: AsyncMiddleware {
    func respond(to request: Request, chainingTo next: AsyncResponder) async throws -> Response {
        let startTime = Date()
        let requestId = UUID().uuidString.prefix(8)
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
        request.logger.info("üì• [\(requestId)] \(request.method) \(request.url.path)")
        
        // –õ–æ–≥–∏—Ä—É–µ–º headers (–±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        if request.logger.logLevel <= .debug {
            for (name, value) in request.headers {
                if name.lowercased() != "authorization" && !name.lowercased().contains("key") {
                    request.logger.debug("  Header: \(name) = \(value)")
                }
            }
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º body (–µ—Å–ª–∏ –µ—Å—Ç—å –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π)
        if let bodyString = request.body.string, bodyString.count < 1000 {
            request.logger.debug("  Body: \(bodyString)")
        }
        
        do {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            let response = try await next.respond(to: request)
            
            let duration = Int(Date().timeIntervalSince(startTime) * 1000) // ms
            
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            request.logger.info("üì§ [\(requestId)] \(response.status.code) in \(duration)ms")
            
            return response
        } catch {
            let duration = Int(Date().timeIntervalSince(startTime) * 1000)
            
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            request.logger.error("‚ùå [\(requestId)] Error after \(duration)ms: \(error)")
            
            throw error
        }
    }
}


import Vapor

/// Builder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram –∫–ª–∞–≤–∏–∞—Ç—É—Ä
struct KeyboardBuilder {
    
    // MARK: - Category Keyboards
    
    /// –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤–∫–ª—é—á–∞—è "–°–≤–æ—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    static func createCategoryKeyboard() -> TelegramReplyMarkup {
        let categories = Constants.ProductCategory.allCases
        
        var rows: [[TelegramInlineKeyboardButton]] = []
        var currentRow: [TelegramInlineKeyboardButton] = []
        
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ 2 –≤ —Ä—è–¥
        for category in categories {
            let button = TelegramInlineKeyboardButton(
                text: category.displayName,
                callbackData: "category_\(category.rawValue)"
            )
            currentRow.append(button)
            
            if currentRow.count == 2 {
                rows.append(currentRow)
                currentRow = []
            }
        }
        
        // –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫
        if !currentRow.isEmpty {
            rows.append(currentRow)
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–°–≤–æ—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è" –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ä—è–¥–æ–º
        rows.append([
            TelegramInlineKeyboardButton(
                text: "‚úèÔ∏è –°–≤–æ—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
                callbackData: "custom_category"
            )
        ])
        
        return TelegramReplyMarkup(inlineKeyboard: rows)
    }
    
    // MARK: - Action Keyboards
    
    /// –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    static func createPostGenerationKeyboard(
        category: Constants.ProductCategory?,
        remainingText: Int,
        remainingPhoto: Int
    ) -> TelegramReplyMarkup {
        var buttons: [[TelegramInlineKeyboardButton]] = []
        
        // –†–Ø–î 1: Quick Repeat (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è)
        if let category = category {
            buttons.append([
                TelegramInlineKeyboardButton(
                    text: "üîÑ –ï—â—ë \(category.emoji) \(category.name)",
                    callbackData: "quick_generate_\(category.rawValue)"
                )
            ])
        }
        
        // –†–Ø–î 2: –£–ª—É—á—à–∏—Ç—å + –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
        buttons.append([
            TelegramInlineKeyboardButton(text: "‚ú® –£–ª—É—á—à–∏—Ç—å", callbackData: "improve_last"),
            TelegramInlineKeyboardButton(text: "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callbackData: "copy_menu")
        ])
        
        // –†–Ø–î 3: –ù–∞–≤–∏–≥–∞—Ü–∏—è
        buttons.append([
            TelegramInlineKeyboardButton(text: "üîÑ –î—Ä—É–≥–∞—è", callbackData: "new_generation"),
            TelegramInlineKeyboardButton(text: "üí∞ –ë–∞–ª–∞–Ω—Å", callbackData: "my_balance")
        ])
        
        // –†–Ø–î 4: –≠–∫—Å–ø–æ—Ä—Ç + –ü–æ–∫—É–ø–∫–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –º–∞–ª–æ –∫—Ä–µ–¥–∏—Ç–æ–≤)
        if remainingText + remainingPhoto <= 5 {
            // –ú–∞–ª–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ - –≤—ã–¥–µ–ª—è–µ–º –ø–æ–∫—É–ø–∫—É
            buttons.append([
                TelegramInlineKeyboardButton(text: "üíé –ö–£–ü–ò–¢–¨ –ü–ê–ö–ï–¢", callbackData: "view_packages")
            ])
            buttons.append([
                TelegramInlineKeyboardButton(text: "üìÑ –≠–∫—Å–ø–æ—Ä—Ç", callbackData: "export_last")
            ])
        } else {
            // –ù–æ—Ä–º–∞–ª—å–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ - –æ–±—ã—á–Ω–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞
            buttons.append([
                TelegramInlineKeyboardButton(text: "üìÑ –≠–∫—Å–ø–æ—Ä—Ç", callbackData: "export_last"),
                TelegramInlineKeyboardButton(text: "üíé –ü–∞–∫–µ—Ç—ã", callbackData: "view_packages")
            ])
        }
        
        return TelegramReplyMarkup(inlineKeyboard: buttons)
    }
    
    // MARK: - Payment Keyboards
    
    /// –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    static func createPaymentKeyboard() -> TelegramReplyMarkup {
        TelegramReplyMarkup(inlineKeyboard: [
            [TelegramInlineKeyboardButton(text: "üì¶ –ú–∞–ª—ã–π 299‚ÇΩ", callbackData: "buy_small")],
            [TelegramInlineKeyboardButton(text: "üì¶üì¶ –°—Ä–µ–¥–Ω–∏–π 599‚ÇΩ", callbackData: "buy_medium")],
            [TelegramInlineKeyboardButton(text: "üì¶üì¶üì¶ –ë–æ–ª—å—à–æ–π 999‚ÇΩ", callbackData: "buy_large")],
            [TelegramInlineKeyboardButton(text: "üéÅüíé –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π 1,399‚ÇΩ", callbackData: "buy_max")]
        ])
    }
    
    /// –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
    static func createPlanPurchaseKeyboard(plan: Constants.SubscriptionPlan, paymentUrl: String) -> TelegramReplyMarkup {
        TelegramReplyMarkup(inlineKeyboard: [
            [TelegramInlineKeyboardButton(text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å \(plan.price)‚ÇΩ", url: paymentUrl)],
            [TelegramInlineKeyboardButton(text: "¬´ –ù–∞–∑–∞–¥ –∫ –ø–∞–∫–µ—Ç–∞–º", callbackData: "view_packages")]
        ])
    }
    
    // MARK: - Balance Keyboard
    
    /// –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
    static func createBalanceKeyboard() -> TelegramReplyMarkup {
        TelegramReplyMarkup(inlineKeyboard: [
            [TelegramInlineKeyboardButton(text: "üíé –ö—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç", callbackData: "view_packages")],
            [TelegramInlineKeyboardButton(text: "üîÑ –ù–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", callbackData: "new_generation")]
        ])
    }
    
    // MARK: - Export Keyboards
    
    /// –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
    static func createExportFormatKeyboard() -> TelegramReplyMarkup {
        TelegramReplyMarkup(inlineKeyboard: [
            [
                TelegramInlineKeyboardButton(text: "üìä Excel (.xlsx)", callbackData: "export_excel"),
                TelegramInlineKeyboardButton(text: "üìÑ –¢–µ–∫—Å—Ç (.txt)", callbackData: "export_txt")
            ]
        ])
    }
    
    // MARK: - Copy Parts Keyboard
    
    /// –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —á–∞—Å—Ç—è–º
    static func createCopyPartsKeyboard() -> TelegramReplyMarkup {
        TelegramReplyMarkup(inlineKeyboard: [
            [
                TelegramInlineKeyboardButton(text: "üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫", callbackData: "copy_title"),
                TelegramInlineKeyboardButton(text: "üìÑ –û–ø–∏—Å–∞–Ω–∏–µ", callbackData: "copy_description")
            ],
            [
                TelegramInlineKeyboardButton(text: "üéØ –í—ã–≥–æ–¥—ã", callbackData: "copy_bullets"),
                TelegramInlineKeyboardButton(text: "üè∑ –•–µ—à—Ç–µ–≥–∏", callbackData: "copy_hashtags")
            ],
            [
                TelegramInlineKeyboardButton(text: "üìã –í—Å—ë —Å—Ä–∞–∑—É", callbackData: "copy_all")
            ]
        ])
    }
    
    // MARK: - History Keyboard
    
    /// –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    static func createHistoryPaginationKeyboard(
        offset: Int,
        limit: Int,
        totalCount: Int
    ) -> TelegramReplyMarkup {
        var buttons: [[TelegramInlineKeyboardButton]] = []
        
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        var navButtons: [TelegramInlineKeyboardButton] = []
        
        if offset > 0 {
            navButtons.append(
                TelegramInlineKeyboardButton(
                    text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callbackData: "history_\(max(0, offset - limit))_\(limit)"
                )
            )
        }
        
        if offset + limit < totalCount {
            navButtons.append(
                TelegramInlineKeyboardButton(
                    text: "‚û°Ô∏è –î–∞–ª–µ–µ",
                    callbackData: "history_\(offset + limit)_\(limit)"
                )
            )
        }
        
        if !navButtons.isEmpty {
            buttons.append(navButtons)
        }
        
        // –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö
        buttons.append([
            TelegramInlineKeyboardButton(text: "üìä –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –≤ Excel", callbackData: "export_all_excel")
        ])
        
        return TelegramReplyMarkup(inlineKeyboard: buttons)
    }
}


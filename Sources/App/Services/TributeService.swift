import Vapor
import Fluent
import Crypto

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Tribute API (–ø–ª–∞—Ç–µ–∂–∏)
final class TributeService: @unchecked Sendable {
    private let app: Application
    private let apiKey: String
    private let apiSecret: String
    private let baseURL: String = "https://api.tribute.to/v1"
    
    init(app: Application, apiKey: String, apiSecret: String) {
        self.app = app
        self.apiKey = apiKey
        self.apiSecret = apiSecret
    }
    
    // MARK: - Public API
    
    /// –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    /// - Parameters:
    ///   - plan: –¢–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏
    ///   - telegramId: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    /// - Returns: URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
    func createPaymentLink(
        plan: Constants.SubscriptionPlan,
        telegramId: Int64
    ) async throws -> String {
        // –í–∞—Ä–∏–∞–Ω—Ç 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é web-—Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç (–ø—Ä–æ—â–µ)
        // Tribute –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∂–µ—Ç –ø–ª–∞—Ç–µ–∂ –∫ –ø—Ä–æ–¥—É–∫—Ç—É
        if !plan.tributeWebLink.isEmpty {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä user_id –≤ URL –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            var components = URLComponents(string: plan.tributeWebLink)
            var queryItems = components?.queryItems ?? []
            queryItems.append(URLQueryItem(name: "user_id", value: "\(telegramId)"))
            queryItems.append(URLQueryItem(name: "return_url", value: "https://t.me/kartochka_pro"))
            components?.queryItems = queryItems
            
            if let url = components?.url?.absoluteString {
                app.logger.info("üí≥ Payment link created: \(url)")
                return url
            }
        }
        
        // –í–∞—Ä–∏–∞–Ω—Ç 2: –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ API (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è)
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –í–∞—Ä–∏–∞–Ω—Ç 1, –Ω–æ –æ—Å—Ç–∞–≤–ª—è—é –∫–æ–¥ –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
        throw Abort(.serviceUnavailable, reason: "Payment link unavailable")
    }
    
    
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å—å –≤–µ–±—Ö—É–∫–∞
    func verifyWebhookSignature(payload: Data, signature: String) -> Bool {
        // HMAC-SHA256 –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
        guard let payloadString = String(data: payload, encoding: .utf8) else {
            return false
        }
        
        let key = SymmetricKey(data: Data(apiSecret.utf8))
        let hmac = HMAC<SHA256>.authenticationCode(for: Data(payloadString.utf8), using: key)
        let computedSignature = Data(hmac).base64EncodedString()
        
        return computedSignature == signature
    }
    
}

// MARK: - Application Extension

extension Application {
    private struct TributeServiceKey: StorageKey {
        typealias Value = TributeService
    }
    
    var tribute: TributeService {
        get {
            guard let service = storage[TributeServiceKey.self] else {
                fatalError("TributeService not configured. Call app.tribute = TributeService(...)")
            }
            return service
        }
        set {
            storage[TributeServiceKey.self] = newValue
        }
    }
}


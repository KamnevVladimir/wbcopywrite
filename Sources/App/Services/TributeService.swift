import Vapor
import Fluent
import Crypto

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Tribute API (–ø–ª–∞—Ç–µ–∂–∏)
final class TributeService: @unchecked Sendable {
    private let app: Application
    private let apiKey: String
    private let apiSecret: String
    private let baseURL: String = "https://api.tribute.to/v1"
    
    init(app: Application, apiKey: String, apiSecret: String) {
        self.app = app
        self.apiKey = apiKey
        self.apiSecret = apiSecret
    }
    
    // MARK: - Public API
    
    /// –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    /// - Parameters:
    ///   - plan: –¢–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏
    ///   - telegramId: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    /// - Returns: URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
    func createPaymentLink(
        plan: Constants.SubscriptionPlan,
        telegramId: Int64
    ) async throws -> String {
        // –í–∞—Ä–∏–∞–Ω—Ç 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é web-—Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç (–ø—Ä–æ—â–µ)
        // Tribute –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∂–µ—Ç –ø–ª–∞—Ç–µ–∂ –∫ –ø—Ä–æ–¥—É–∫—Ç—É
        if !plan.tributeWebLink.isEmpty {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä user_id –≤ URL –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            var components = URLComponents(string: plan.tributeWebLink)
            var queryItems = components?.queryItems ?? []
            queryItems.append(URLQueryItem(name: "user_id", value: "\(telegramId)"))
            queryItems.append(URLQueryItem(name: "return_url", value: "https://t.me/kartochka_pro"))
            components?.queryItems = queryItems
            
            if let url = components?.url?.absoluteString {
                app.logger.info("üí≥ Payment link created: \(url)")
                return url
            }
        }
        
        // –í–∞—Ä–∏–∞–Ω—Ç 2: –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ API (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è)
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –í–∞—Ä–∏–∞–Ω—Ç 1, –Ω–æ –æ—Å—Ç–∞–≤–ª—è—é –∫–æ–¥ –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
        throw Abort(.serviceUnavailable, reason: "Payment link unavailable")
    }
    
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ–±—Ö—É–∫ –æ—Ç Tribute
    func handleWebhook(_ event: TributeWebhookEvent, on req: Request) async throws {
        req.logger.info("üí∞ Tribute webhook: type=\(event.type) userId=\(event.data.userId) eventId=\(event.id)")
        
        // üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ event –µ—â–µ –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
        let duplicate = try await ProcessedWebhook.query(on: req.db)
            .filter(\.$eventId == event.id)
            .first()
        
        if duplicate != nil {
            req.logger.info("‚è≠Ô∏è Duplicate webhook detected, skipping: \(event.id)")
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
        guard event.type == TributeWebhookEvent.EventType.paymentSucceeded.rawValue else {
            req.logger.info("‚è≠Ô∏è Skipping non-payment event: \(event.type)")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–∂–µ non-payment —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            let processed = ProcessedWebhook(
                eventId: event.id,
                eventType: event.type,
                userId: Int64(event.data.userId),
                amount: event.data.amount
            )
            try await processed.save(on: req.db)
            
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        guard event.data.status.lowercased() == "succeeded" || event.data.status.lowercased() == "paid" else {
            req.logger.warning("‚ö†Ô∏è Payment not succeeded: \(event.data.status)")
            return
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º Telegram ID
        guard let telegramId = Int64(event.data.userId) else {
            req.logger.error("‚ùå Invalid telegram ID: \(event.data.userId)")
            throw Abort(.badRequest, reason: "Invalid user ID")
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞–Ω –ø–æ subscriptionId –∏–ª–∏ description
        let plan = try identifyPlan(from: event)
        
        // –ù–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try await addCreditsToUser(telegramId: telegramId, plan: plan, on: req.db)
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try await notifyUserAboutPayment(telegramId: telegramId, plan: plan)
        
        // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º event_id —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
        let processed = ProcessedWebhook(
            eventId: event.id,
            eventType: event.type,
            userId: telegramId,
            amount: event.data.amount
        )
        try await processed.save(on: req.db)
        
        req.logger.info("‚úÖ Payment processed: user=\(telegramId) plan=\(plan.name) amount=\(event.data.amount/100)‚ÇΩ")
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å—å –≤–µ–±—Ö—É–∫–∞
    func verifyWebhookSignature(payload: Data, signature: String) -> Bool {
        // HMAC-SHA256 –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
        guard let payloadString = String(data: payload, encoding: .utf8) else {
            return false
        }
        
        let key = SymmetricKey(data: Data(apiSecret.utf8))
        let hmac = HMAC<SHA256>.authenticationCode(for: Data(payloadString.utf8), using: key)
        let computedSignature = Data(hmac).base64EncodedString()
        
        return computedSignature == signature
    }
    
    // MARK: - Private Helpers
    
    /// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–ª–∞–Ω –ø–æ –¥–∞–Ω–Ω—ã–º –≤–µ–±—Ö—É–∫–∞
    private func identifyPlan(from event: TributeWebhookEvent) throws -> Constants.SubscriptionPlan {
        // –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–æ subscriptionId (Product ID)
        if let subId = event.data.subscriptionId {
            if let plan = Constants.SubscriptionPlan.allCases.first(where: { $0.tributeProductId == subId }) {
                return plan
            }
        }
        
        // –í–∞—Ä–∏–∞–Ω—Ç 2: –ü–æ –æ–ø–∏—Å–∞–Ω–∏—é –ø–ª–∞—Ç–µ–∂–∞
        if let description = event.data.description {
            // "–ü–∞–∫–µ—Ç Small" ‚Üí .small
            for plan in Constants.SubscriptionPlan.allCases {
                if description.contains(plan.name) || description.contains(plan.rawValue) {
                    return plan
                }
            }
        }
        
        // –í–∞—Ä–∏–∞–Ω—Ç 3: –ü–æ —Å—É–º–º–µ (fallback)
        let amountRub = event.data.amount / 100 // –∫–æ–ø–µ–π–∫–∏ ‚Üí —Ä—É–±–ª–∏
        if let plan = Constants.SubscriptionPlan.allCases.first(where: { Int(truncating: $0.price as NSNumber) == amountRub }) {
            return plan
        }
        
        app.logger.error("‚ùå Cannot identify plan from webhook: \(event)")
        throw Abort(.badRequest, reason: "Cannot identify subscription plan")
    }
    
    /// –ù–∞—á–∏—Å–ª–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    /// Thread-safe: –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    private func addCreditsToUser(
        telegramId: Int64,
        plan: Constants.SubscriptionPlan,
        on db: any Database
    ) async throws {
        // –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º —Å–≤–µ–∂–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        guard let user = try await User.query(on: db)
            .filter(\.$telegramId == telegramId)
            .first() else {
            throw Abort(.notFound, reason: "User not found")
        }
        
        // –ù–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
        user.textCredits += plan.textGenerationsLimit
        user.photoCredits += plan.photoGenerationsLimit
        
        try await user.update(on: db)
        
        app.logger.info("‚úÖ Credits added: text=\(plan.textGenerationsLimit) photo=\(plan.photoGenerationsLimit) for user=\(telegramId)")
    }
    
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    private func notifyUserAboutPayment(
        telegramId: Int64,
        plan: Constants.SubscriptionPlan
    ) async throws {
        let botService = app.telegramBot
        
        let message = """
        ‚úÖ *–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!*
        
        üì¶ *–ü–∞–∫–µ—Ç:* \(plan.emoji) \(plan.name)
        üí∞ *–°—É–º–º–∞:* \(plan.price) ‚ÇΩ
        
        üéâ *–ù–∞—á–∏—Å–ª–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:*
        ‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ: +\(plan.textGenerationsLimit)
        ‚Ä¢ –° —Ñ–æ—Ç–æ: +\(plan.photoGenerationsLimit)
        
        –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤!
        
        –ò—Å–ø–æ–ª—å–∑—É–π /generate —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üöÄ
        """
        
        try await botService.sendMessage(
            chatId: telegramId,
            text: message
        )
    }
}

// MARK: - Application Extension

extension Application {
    private struct TributeServiceKey: StorageKey {
        typealias Value = TributeService
    }
    
    var tribute: TributeService {
        get {
            guard let service = storage[TributeServiceKey.self] else {
                fatalError("TributeService not configured. Call app.tribute = TributeService(...)")
            }
            return service
        }
        set {
            storage[TributeServiceKey.self] = newValue
        }
    }
}


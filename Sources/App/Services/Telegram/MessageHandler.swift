import Vapor
import Fluent

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
final class MessageHandler: @unchecked Sendable {
    private let app: Application
    private let api: TelegramAPI
    private let commandHandler: CommandHandler
    private let generationService: GenerationService
    private let log: BotLogger
    
    init(app: Application, api: TelegramAPI, commandHandler: CommandHandler, generationService: GenerationService) {
        self.app = app
        self.api = api
        self.commandHandler = commandHandler
        self.generationService = generationService
        self.log = app.botLogger
    }
    
    // MARK: - Main Handler
    
    func handle(_ message: TelegramMessage, user: User) async throws {
        let chatId = message.chat.id
        
        // –î–æ–∫—É–º–µ–Ω—Ç (–¥–ª—è batch generation)
        if let document = message.document {
            log.debug("Document received: \(document.fileName ?? "unknown")")
            try await handleBatchDocument(document, user: user, chatId: chatId)
            return
        }
        
        // –§–æ—Ç–æ
        if let photos = message.photo, !photos.isEmpty {
            log.photoReceived(user, size: photos.first?.fileSize ?? 0)
            try await handlePhoto(photos, caption: message.caption, user: user, chatId: chatId)
            return
        }
        
        // –¢–µ–∫—Å—Ç
        guard let text = message.text else { return }
        
        log.userMessage(user, text: text)
        
        // –ö–æ–º–∞–Ω–¥—ã
        if text.starts(with: "/") {
            try await commandHandler.handle(text, user: user, chatId: chatId)
            return
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if let state = user.selectedCategory {
            if state.starts(with: "improve_") {
                try await handleImproveInput(text, user: user, chatId: chatId)
                return
            } else if state == "awaiting_custom_category" {
                try await handleCustomCategoryInput(text, user: user, chatId: chatId)
                return
            }
        }
        
        // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        try await handleProductText(text, user: user, chatId: chatId)
    }
    
    // MARK: - Text Handlers
    
    private func handleProductText(_ text: String, user: User, chatId: Int64) async throws {
        guard let categoryRaw = user.selectedCategory,
              let category = Constants.ProductCategory(rawValue: categoryRaw) else {
            try await api.sendMessage(
                chatId: chatId,
                text: "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ /start"
            )
            return
        }
        
        try await generationService.generateFromText(
            text: text,
            category: category,
            user: user,
            chatId: chatId
        )
    }
    
    private func handleCustomCategoryInput(_ categoryName: String, user: User, chatId: Int64) async throws {
        let repo = UserRepository(database: app.db)
        try await repo.updateCategory(user, category: "other")
        
        let text = MessageFormatter.customCategoryAccepted(categoryName)
        try await api.sendMessage(chatId: chatId, text: text)
    }
    
    private func handleImproveInput(_ improvementText: String, user: User, chatId: Int64) async throws {
        // –ò–∑–≤–ª–µ—á—å UUID –∏–∑ state
        guard let state = user.selectedCategory,
              state.starts(with: "improve_"),
              let uuidString = state.split(separator: "_").last,
              let uuid = UUID(uuidString: String(uuidString)),
              let originalGen = try await Generation.find(uuid, on: app.db) else {
            try await api.sendMessage(chatId: chatId, text: "‚ùå –û—à–∏–±–∫–∞: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        }
        
        // –û—á–∏—Å—Ç–∏—Ç—å state
        let repo = UserRepository(database: app.db)
        try await repo.updateCategory(user, category: nil)
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        guard try await repo.hasGenerationsAvailable(user) else {
            try await api.sendMessage(chatId: chatId, text: Constants.BotMessage.limitExceeded)
            return
        }
        
        // üîí –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –∫—Ä–µ–¥–∏—Ç
        try await repo.incrementGenerations(user)
        
        let progressMsg = try await api.sendMessage(
            chatId: chatId,
            text: "‚è≥ *–£–ª—É—á—à–∞—é –æ–ø–∏—Å–∞–Ω–∏–µ...* ‚ú®"
        )
        
        do {
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
            let bullets = (originalGen.resultBullets ?? []).joined(separator: "\n")
            let hashtags = (originalGen.resultHashtags ?? []).joined(separator: " ")
            
            let improvePrompt = """
            –ó–ê–î–ê–ß–ê: –£–ª—É—á—à–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º –∫–ª–∏–µ–Ω—Ç–∞.
            
            –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ï –û–ü–ò–°–ê–ù–ò–ï:
            –ó–∞–≥–æ–ª–æ–≤–æ–∫: \(originalGen.resultTitle ?? "")
            –û–ø–∏—Å–∞–Ω–∏–µ: \(originalGen.resultDescription ?? "")
            –í—ã–≥–æ–¥—ã: \(bullets)
            –•–µ—à—Ç–µ–≥–∏: \(hashtags)
            
            –ü–û–ñ–ï–õ–ê–ù–ò–Ø –ö–õ–ò–ï–ù–¢–ê:
            \(improvementText)
            
            –°–æ–∑–¥–∞–π –£–õ–£–ß–®–ï–ù–ù–£–Æ –≤–µ—Ä—Å–∏—é —Å —É—á—ë—Ç–æ–º –ø–æ–∂–µ–ª–∞–Ω–∏–π. –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
            """
            
            guard let category = Constants.ProductCategory(rawValue: originalGen.category) else {
                throw Abort(.badRequest)
            }
            
            let description = try await app.claude.generateProductDescription(
                productInfo: improvePrompt,
                category: category
            )
            
            // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            let generation = Generation(
                userId: user.id!,
                category: originalGen.category,
                productName: "‚ú® –£–ª—É—á—à–µ–Ω–∏–µ: \(originalGen.productName)",
                productDetails: improvementText
            )
            generation.resultTitle = description.title
            generation.resultDescription = description.description
            generation.resultBullets = description.bullets
            generation.resultHashtags = description.hashtags
            try await generation.save(on: app.db)
            
            // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—á–µ—Ä–µ–∑ GenerationService)
            // –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:
            try await api.sendMessage(chatId: chatId, text: "‚úÖ –£–ª—É—á—à–µ–Ω–æ!")
            
        } catch {
            log.generationError(error)
            try? await repo.rollbackGeneration(user)
            try await api.sendMessage(chatId: chatId, text: Constants.BotMessage.error)
        }
    }
    
    // MARK: - Photo Handler
    
    private func handlePhoto(_ photos: [TelegramPhotoSize], caption: String?, user: User, chatId: Int64) async throws {
        guard let categoryRaw = user.selectedCategory,
              let category = Constants.ProductCategory(rawValue: categoryRaw) else {
            try await api.sendMessage(
                chatId: chatId,
                text: """
                üì∑ *–í–∏–∂—É —Ñ–æ—Ç–æ!*
                
                –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:
                /start
                
                –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å–Ω–æ–≤–∞.
                """
            )
            return
        }
        
        try await generationService.generateFromPhoto(
            photos: photos,
            caption: caption,
            category: category,
            user: user,
            chatId: chatId
        )
    }
    
    // MARK: - Batch Document Handler
    
    private func handleBatchDocument(_ document: TelegramDocument, user: User, chatId: Int64) async throws {
        try await api.sendMessage(
            chatId: chatId,
            text: "üìÑ –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        )
    }
}


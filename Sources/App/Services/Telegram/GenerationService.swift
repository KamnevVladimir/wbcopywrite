import Vapor
import Fluent

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
final class GenerationService: @unchecked Sendable {
    private let app: Application
    private let api: TelegramAPI
    private let log: BotLogger
    
    init(app: Application, api: TelegramAPI) {
        self.app = app
        self.api = api
        self.log = app.botLogger
    }
    
    // MARK: - Text Generation
    
    /// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ —Ç–µ–∫—Å—Ç—É
    func generateFromText(
        text: String,
        category: Constants.ProductCategory,
        user: User,
        chatId: Int64
    ) async throws {
        let repo = UserRepository(database: app.db)
        
        log.generationStarted(user, category: category.rawValue)
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        let remaining = try await repo.getRemainingGenerations(user)
        guard remaining > 0 else {
            try await api.sendMessage(chatId: chatId, text: Constants.BotMessage.limitExceeded)
            return
        }
        
        // üîí –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –∫—Ä–µ–¥–∏—Ç –î–û –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        log.creditReserved(user, remaining: remaining - 1)
        try await repo.incrementGenerations(user)
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        let progressMsg = try await api.sendMessage(
            chatId: chatId,
            text: "‚è≥ *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–≤–∞—Ä...* üîç"
        )
        
        do {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫
            Task {
                try? await Task.sleep(nanoseconds: 3_000_000_000)
                try? await api.editMessage(
                    chatId: chatId,
                    messageId: progressMsg,
                    text: "‚è≥ *–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ...* ‚úçÔ∏è"
                )
            }
            
            // –í—ã–∑–æ–≤ Claude API
            let description = try await app.claude.generateProductDescription(
                productInfo: text,
                category: category
            )
            
            log.claudeAPICall(tokens: description.tokensUsed, timeMs: description.processingTimeMs)
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            let generation = Generation(
                userId: user.id!,
                category: category.rawValue,
                productName: text,
                productDetails: text,
                tokensUsed: description.tokensUsed,
                processingTimeMs: description.processingTimeMs
            )
            generation.resultTitle = description.title
            generation.resultDescription = description.description
            generation.resultBullets = description.bullets
            generation.resultHashtags = description.hashtags
            
            try await generation.save(on: app.db)
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
            try await repo.addRecentCategory(user, category: category.rawValue)
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            try await sendResult(description: description, user: user, chatId: chatId)
            
            log.generationSuccess(user, tokensUsed: description.tokensUsed, timeMs: description.processingTimeMs)
            
        } catch {
            log.generationError(error)
            
            // –û—Ç–∫–∞—Ç –∫—Ä–µ–¥–∏—Ç–∞
            log.creditRolledBack(user)
            try? await repo.rollbackGeneration(user)
            
            try await api.sendMessage(chatId: chatId, text: Constants.BotMessage.error)
        }
    }
    
    // MARK: - Photo Generation
    
    /// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ
    func generateFromPhoto(
        photos: [TelegramPhotoSize],
        caption: String?,
        category: Constants.ProductCategory,
        user: User,
        chatId: Int64
    ) async throws {
        let repo = UserRepository(database: app.db)
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ñ–æ—Ç–æ
        let remaining = try await repo.getRemainingPhotoGenerations(user)
        guard remaining > 0 else {
            let plan = try await repo.getCurrentPlan(user)
            try await api.sendMessage(
                chatId: chatId,
                text: MessageFormatter.photoLimitExceeded(plan: plan)
            )
            return
        }
        
        // üîí –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –∫—Ä–µ–¥–∏—Ç
        try await repo.incrementPhotoGenerations(user)
        
        try await api.sendMessage(
            chatId: chatId,
            text: "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 15-20 —Å–µ–∫—É–Ω–¥."
        )
        
        do {
            // –°–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ
            guard let largestPhoto = photos.max(by: { $0.fileSize ?? 0 < $1.fileSize ?? 0 }) else {
                throw GenerationError.photoNotFound
            }
            
            let filePath = try await api.getFilePath(fileId: largestPhoto.fileId)
            let imageData = try await api.downloadFile(filePath: filePath)
            
            log.photoDownloaded(size: imageData.count)
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
            guard imageData.count <= 10 * 1024 * 1024 else {
                throw GenerationError.imageTooLarge
            }
            
            // –í—ã–∑–æ–≤ Claude Vision API
            let additionalContext = caption ?? "–¢–æ–≤–∞—Ä –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"
            let description = try await app.claude.generateProductDescriptionFromPhoto(
                imageData: imageData,
                productInfo: additionalContext,
                category: category
            )
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            let generation = Generation(
                userId: user.id!,
                category: category.rawValue,
                productName: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ñ–æ—Ç–æ",
                productDetails: additionalContext,
                tokensUsed: description.tokensUsed,
                processingTimeMs: description.processingTimeMs
            )
            generation.resultTitle = description.title
            generation.resultDescription = description.description
            generation.resultBullets = description.bullets
            generation.resultHashtags = description.hashtags
            
            try await generation.save(on: app.db)
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
            try await repo.addRecentCategory(user, category: category.rawValue)
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            try await sendResult(description: description, user: user, chatId: chatId)
            
            log.generationSuccess(user, tokensUsed: description.tokensUsed, timeMs: description.processingTimeMs)
            
        } catch {
            log.generationError(error)
            
            // –û—Ç–∫–∞—Ç —Ñ–æ—Ç–æ –∫—Ä–µ–¥–∏—Ç–∞
            try? await repo.rollbackPhotoGeneration(user)
            
            try await api.sendMessage(chatId: chatId, text: Constants.BotMessage.error)
        }
    }
    
    // MARK: - Send Result
    
    private func sendResult(
        description: ClaudeService.ProductDescription,
        user: User,
        chatId: Int64
    ) async throws {
        let repo = UserRepository(database: app.db)
        let remainingText = try await repo.getRemainingGenerations(user)
        let remainingPhoto = try await repo.getRemainingPhotoGenerations(user)
        let plan = try await repo.getCurrentPlan(user)
        let currentCategory = user.selectedCategory.flatMap { Constants.ProductCategory(rawValue: $0) }
        
        // Smart Nudge
        let nudge = MessageFormatter.smartNudge(
            remainingText: remainingText,
            remainingPhoto: remainingPhoto,
            isFree: plan == .free
        )
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        let (msg1, msg2, msg3) = MessageFormatter.generationResult(
            title: description.title,
            description: description.description,
            bullets: description.bullets,
            hashtags: description.hashtags,
            remainingText: remainingText,
            remainingPhoto: remainingPhoto,
            nudge: nudge
        )
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –±–ª–æ–∫–æ–º –±–µ–∑ –∫–Ω–æ–ø–æ–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        let joined = [msg1, msg2, msg3].joined(separator: "\n\n").markdownV2Escaped
        let codeBlock = "```\n\(joined)\n```"
        try await api.sendMessage(chatId: chatId, text: codeBlock, replyMarkup: nil, parseMode: "MarkdownV2")
    }
    
    // MARK: - Errors
    
    enum GenerationError: Error {
        case photoNotFound
        case imageTooLarge
        case categoryNotSelected
    }
}

// MARK: - Application Extension

extension Application {
    private struct GenerationServiceKey: StorageKey {
        typealias Value = GenerationService
    }
    
    var generationService: GenerationService {
        get {
            guard let service = storage[GenerationServiceKey.self] else {
                fatalError("GenerationService not configured")
            }
            return service
        }
        set {
            storage[GenerationServiceKey.self] = newValue
        }
    }
}


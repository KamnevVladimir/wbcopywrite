import Vapor
import Fluent

/// Telegram Bot Service - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
final class TelegramBotService: @unchecked Sendable {
    private let app: Application
    private let botToken: String
    private let baseURL: String
    
    init(app: Application, botToken: String) {
        self.app = app
        self.botToken = botToken
        self.baseURL = "https://api.telegram.org/bot\(botToken)"
    }
    
    // MARK: - Public API
    
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
    func handleUpdate(_ update: TelegramUpdate) async {
        do {
            if let message = update.message {
                try await handleMessage(message)
            }
            
            if let callback = update.callbackQuery {
                try await handleCallback(callback)
            }
        } catch {
            app.logger.error("‚ùå Error handling update #\(update.updateId): \(error)")
        }
    }
    
    // MARK: - Message Handlers
    
    private func handleMessage(_ message: TelegramMessage) async throws {
        let user = try await getOrCreateUser(from: message.from, chatId: message.chat.id)
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if let document = message.document {
            app.logger.info("üìÑ Document from @\(message.from.username ?? "unknown"): \(document.fileName ?? "unknown")")
            try await handleBatchDocument(document: document, user: user, chatId: message.chat.id)
            return
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if let photos = message.photo, !photos.isEmpty {
            app.logger.info("üì∑ Photo from @\(message.from.username ?? "unknown")")
            try await handlePhotoDescription(photos: photos, caption: message.caption, user: user, chatId: message.chat.id)
            return
        }
        
        guard let text = message.text else { return }
        
        app.logger.info("üí¨ Message from @\(message.from.username ?? "unknown"): \(text)")
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if text.starts(with: "/") {
            try await handleCommand(text, user: user, chatId: message.chat.id)
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
            if let category = user.selectedCategory, category.starts(with: "improve_") {
                try await handleImproveInput(text: text, user: user, chatId: message.chat.id)
            } else {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                try await handleProductDescription(text: text, user: user, chatId: message.chat.id)
            }
        }
    }
    
    private func handleCommand(_ command: String, user: User, chatId: Int64) async throws {
        switch command {
        case "/start":
            try await handleStartCommand(user: user, chatId: chatId)
            
        case "/help":
            try await handleHelpCommand(chatId: chatId)
            
        case "/generate":
            try await handleGenerateCommand(user: user, chatId: chatId)
            
        case "/balance":
            try await handleBalanceCommand(user: user, chatId: chatId)
            
        case "/subscribe":
            try await handleSubscribeCommand(user: user, chatId: chatId)
            
        case "/history":
            try await handleHistoryCommand(user: user, chatId: chatId)
            
        case "/cancel":
            try await handleCancelCommand(user: user, chatId: chatId)
            
        case "/batch":
            try await handleBatchCommand(user: user, chatId: chatId)
            
        default:
            try await sendMessage(
                chatId: chatId,
                text: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
            )
        }
    }
    
    // MARK: - Command Implementations
    
    private func handleStartCommand(user: User, chatId: Int64) async throws {
        let repo = UserRepository(database: app.db)
        let plan = try await repo.getCurrentPlan(user)
        let remainingText = try await repo.getRemainingGenerations(user)
        let remainingPhoto = try await repo.getRemainingPhotoGenerations(user)
        
        let welcomeText = """
        üëã *–ü—Ä–∏–≤–µ—Ç, \(user.displayName)!*
        
        –Ø *–ö–∞—Ä—Ç–æ—á–∫–∞–ü–†–û* ‚Äî AI-–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¥–ª—è WB/Ozon
        
        üìä *–¢–≤–æ–π –ø–∞–∫–µ—Ç:* \(plan.emoji) \(plan.name)
        –û—Å—Ç–∞–ª–æ—Å—å: \(remainingText) —Ç–µ–∫—Å—Ç–æ–≤ + \(remainingPhoto) —Ñ–æ—Ç–æ
        
        üí° *–ü—Ä–∏–º–µ—Ä —á—Ç–æ —è —Å–æ–∑–¥–∞—é:*
        
        –î–æ: _"–ö—Ä–æ—Å—Å–æ–≤–∫–∏ –º—É–∂—Å–∫–∏–µ –±–µ–ª—ã–µ"_
        –ü–æ—Å–ª–µ: _"–ö—Ä–æ—Å—Å–æ–≤–∫–∏ –º—É–∂—Å–∫–∏–µ Mizuno Wave –±–µ–ª—ã–µ 46 —Ä–∞–∑–º–µ—Ä —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–æ—à–≤–∞ –ú–∏—à–ª–µ–Ω"_
        
        üöÄ *–ß—Ç–æ —è –¥–µ–ª–∞—é:*
        ‚úÖ SEO-–∑–∞–≥–æ–ª–æ–≤–∫–∏ (100 —Å–∏–º–≤–æ–ª–æ–≤)
        ‚úÖ –ü—Ä–æ–¥–∞—é—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è (500 —Å–∏–º–≤–æ–ª–æ–≤)
        ‚úÖ 5 –∫–ª—é—á–µ–≤—ã—Ö –≤—ã–≥–æ–¥ (bullets)
        ‚úÖ 7 —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
        ‚úÖ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ üì∑
        
        üí∞ *–≠–∫–æ–Ω–æ–º–∏—è:* –ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä 500‚ÇΩ ‚Üí –ú—ã 14‚ÇΩ!
        
        –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:
        """
        
        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ + –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        let categoryKeyboard = createCategoryKeyboard()
        let subscribeButton = [[
            TelegramInlineKeyboardButton(text: "üíé –¢–∞—Ä–∏—Ñ—ã –∏ —Ü–µ–Ω—ã", callbackData: "view_packages")
        ]]
        
        let fullKeyboard = TelegramReplyMarkup(
            inlineKeyboard: (categoryKeyboard.inlineKeyboard ?? []) + subscribeButton
        )
        
        try await sendMessage(
            chatId: chatId,
            text: welcomeText,
            replyMarkup: fullKeyboard
        )
    }
    
    private func handleHelpCommand(chatId: Int64) async throws {
        let helpText = """
        üìñ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
        
        1Ô∏è‚É£ /start - –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –§–û–¢–û üì∑
        3Ô∏è‚É£ –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞ 10 —Å–µ–∫!
        4Ô∏è‚É£ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π –≤ Excel –∏–ª–∏ TXT
        
        üí° *–ö–æ–º–∞–Ω–¥—ã:*
        /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        /generate - –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        /history - –¢–≤–æ–∏ –æ–ø–∏—Å–∞–Ω–∏—è
        /balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫
        /subscribe - –ü–∞–∫–µ—Ç—ã –∏ —Ü–µ–Ω—ã
        /batch - –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
        /cancel - –û—Ç–º–µ–Ω–∏—Ç—å
        
        üí∞ *–¢–∞—Ä–∏—Ñ—ã:*
        –û—Ç 299‚ÇΩ/–º–µ—Å –∑–∞ 20 –æ–ø–∏—Å–∞–Ω–∏–π
        = 14.95‚ÇΩ –∑–∞ –æ–ø–∏—Å–∞–Ω–∏–µ (vs 500‚ÇΩ —É –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞!)
        
        ‚ùì *–í–æ–ø—Ä–æ—Å—ã?* \(Constants.Support.username)
        """
        
        try await sendMessage(chatId: chatId, text: helpText)
    }
    
    private func handleGenerateCommand(user: User, chatId: Int64) async throws {
        let repo = UserRepository(database: app.db)
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç
        guard try await repo.hasGenerationsAvailable(user) else {
            try await sendMessage(chatId: chatId, text: Constants.BotMessage.limitExceeded)
            return
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        let keyboard = createCategoryKeyboard()
        
        try await sendMessage(
            chatId: chatId,
            text: Constants.BotMessage.selectCategory,
            replyMarkup: keyboard
        )
    }
    
    private func handleBalanceCommand(user: User, chatId: Int64) async throws {
        let repo = UserRepository(database: app.db)
        let plan = try await repo.getCurrentPlan(user)
        let remainingText = try await repo.getRemainingGenerations(user)
        let remainingPhoto = try await repo.getRemainingPhotoGenerations(user)
        
        let balanceText = """
        üí∞ *–¢–≤–æ–π –±–∞–ª–∞–Ω—Å*
        
        üì¶ *–¢–µ–∫—É—â–∏–π –ø–∞–∫–µ—Ç:* \(plan.emoji) \(plan.name)
        
        üìä *–û—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:*
        ‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö: \(remainingText) –∏–∑ \(plan.textGenerationsLimit)
        ‚Ä¢ –° —Ñ–æ—Ç–æ: \(remainingPhoto) –∏–∑ \(plan.photoGenerationsLimit)
        ‚Ä¢ –í—Å–µ–≥–æ: \(remainingText + remainingPhoto) –∏–∑ \(plan.totalGenerationsLimit)
        
        üí° *–¶–µ–Ω–∞ –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:* \(plan.pricePerGeneration) ‚ÇΩ
        """
        
        let buttons = [[
            TelegramInlineKeyboardButton(text: "üíé –ü–∞–∫–µ—Ç—ã", callbackData: "view_packages")
        ]]
        let keyboard = TelegramReplyMarkup(inlineKeyboard: buttons)
        
        try await sendMessage(chatId: chatId, text: balanceText, replyMarkup: keyboard)
    }
    
    private func handleSubscribeCommand(user: User, chatId: Int64) async throws {
        let repo = UserRepository(database: app.db)
        let currentPlan = try await repo.getCurrentPlan(user)
        
        let subscribeText = """
        üíé *–ü–ê–ö–ï–¢–´ –ö–ê–†–¢–û–ß–ö–ê–ü–†–û*
        
        –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π: *\(currentPlan.emoji) \(currentPlan.name)*
        
        üì¶ *–ú–ê–õ–´–ô* - 299‚ÇΩ/–º–µ—Å
        ‚Ä¢ 20 –æ–ø–∏—Å–∞–Ω–∏–π (17 —Ç–µ–∫—Å—Ç–æ–≤ + 3 —Ñ–æ—Ç–æ)
        ‚Ä¢ 14.95‚ÇΩ –∑–∞ –æ–ø–∏—Å–∞–Ω–∏–µ
        ‚Ä¢ –î–ª—è 1-5 —Ç–æ–≤–∞—Ä–æ–≤/–Ω–µ–¥–µ–ª—è
        
        üì¶üì¶ *–°–†–ï–î–ù–ò–ô* - 599‚ÇΩ/–º–µ—Å
        ‚Ä¢ 50 –æ–ø–∏—Å–∞–Ω–∏–π (45 —Ç–µ–∫—Å—Ç–æ–≤ + 5 —Ñ–æ—Ç–æ)
        ‚Ä¢ 11.98‚ÇΩ –∑–∞ –æ–ø–∏—Å–∞–Ω–∏–µ
        ‚Ä¢ –î–ª—è 10-15 —Ç–æ–≤–∞—Ä–æ–≤/–Ω–µ–¥–µ–ª—è
        
        üì¶üì¶üì¶ *–ë–û–õ–¨–®–û–ô* - 999‚ÇΩ/–º–µ—Å
        ‚Ä¢ 100 –æ–ø–∏—Å–∞–Ω–∏–π (90 —Ç–µ–∫—Å—Ç–æ–≤ + 10 —Ñ–æ—Ç–æ)
        ‚Ä¢ 9.99‚ÇΩ –∑–∞ –æ–ø–∏—Å–∞–Ω–∏–µ
        ‚Ä¢ –î–ª—è 20-30 —Ç–æ–≤–∞—Ä–æ–≤/–Ω–µ–¥–µ–ª—è
        
        üéÅüíé *–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô* - 1,399‚ÇΩ/–º–µ—Å
        ‚Ä¢ 200 –æ–ø–∏—Å–∞–Ω–∏–π (180 —Ç–µ–∫—Å—Ç–æ–≤ + 20 —Ñ–æ—Ç–æ)
        ‚Ä¢ 6.99‚ÇΩ –∑–∞ –æ–ø–∏—Å–∞–Ω–∏–µ
        ‚Ä¢ –î–ª—è –∞–≥–µ–Ω—Ç—Å—Ç–≤, 30+ —Ç–æ–≤–∞—Ä–æ–≤/–Ω–µ–¥–µ–ª—è
        
        ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
        üí∞ *–¢–í–û–Ø –≠–ö–û–ù–û–ú–ò–Ø:*
        
        –ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä: 500‚ÇΩ –∑–∞ –æ–ø–∏—Å–∞–Ω–∏–µ
        –ú–∞–ª—ã–π –ø–∞–∫–µ—Ç: 14.95‚ÇΩ –∑–∞ –æ–ø–∏—Å–∞–Ω–∏–µ
        
        *–≠–∫–æ–Ω–æ–º–∏—è: 97%!*
        
        –ü—Ä–∏–º–µ—Ä (–°—Ä–µ–¥–Ω–∏–π –ø–∞–∫–µ—Ç):
        ‚ùå –ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä: 50 √ó 500‚ÇΩ = 25,000‚ÇΩ
        ‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞–ü–†–û: 599‚ÇΩ
        üíé *–≠–∫–æ–Ω–æ–º–∏—à—å: 24,401‚ÇΩ/–º–µ—Å!*
        ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
        
        ‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Tribute —Å–∫–æ—Ä–æ!
        –ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω Free –ø–∞–∫–µ—Ç.
        
        ‚ùì –í–æ–ø—Ä–æ—Å—ã? \(Constants.Support.username)
        """
        
        try await sendMessage(chatId: chatId, text: subscribeText)
    }
    
    private func handleHistoryCommand(user: User, chatId: Int64, offset: Int = 0, limit: Int = 5) async throws {
        let generations = try await Generation.query(on: app.db)
            .filter(\.$user.$id == user.id!)
            .sort(\.$createdAt, .descending)
            .range(offset..<(offset + limit))
            .all()
        
        let totalCount = try await Generation.query(on: app.db)
            .filter(\.$user.$id == user.id!)
            .count()
        
        guard !generations.isEmpty else {
            try await sendMessage(
                chatId: chatId,
                text: "üìú –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π /generate —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–µ!"
            )
            return
        }
        
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "dd MMM, HH:mm"
        dateFormatter.locale = Locale(identifier: "ru_RU")
        
        var historyText = "üìú *–ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π* (\(offset+1)-\(offset+generations.count) –∏–∑ \(totalCount)):\n\n"
        
        var buttons: [[TelegramInlineKeyboardButton]] = []
        
        for (index, gen) in generations.enumerated() {
            let date = dateFormatter.string(from: gen.createdAt ?? Date())
            let categoryEmoji = Constants.ProductCategory(rawValue: gen.category)?.emoji ?? "üìù"
            let title = (gen.resultTitle ?? gen.productName).prefix(35)
            
            historyText += "\(offset + index + 1)Ô∏è‚É£ \(categoryEmoji) \(date)\n"
            historyText += "\(title)...\n\n"
            
            // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if let genId = gen.id?.uuidString {
                buttons.append([
                    TelegramInlineKeyboardButton(text: "üëÅ #\(offset + index + 1)", callbackData: "view_gen_\(genId)"),
                    TelegramInlineKeyboardButton(text: "‚ú® –£–ª—É—á—à–∏—Ç—å", callbackData: "improve_\(genId)")
                ])
            }
        }
        
        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        var paginationButtons: [TelegramInlineKeyboardButton] = []
        if offset > 0 {
            paginationButtons.append(TelegramInlineKeyboardButton(text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callbackData: "history_\(max(0, offset - limit))_\(limit)"))
        }
        if offset + limit < totalCount {
            paginationButtons.append(TelegramInlineKeyboardButton(text: "–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callbackData: "history_\(offset + limit)_\(limit)"))
        }
        if !paginationButtons.isEmpty {
            buttons.append(paginationButtons)
        }
        
        // –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ–≥–æ
        buttons.append([
            TelegramInlineKeyboardButton(text: "üìä –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –≤ Excel", callbackData: "export_all_excel")
        ])
        
        let keyboard = TelegramReplyMarkup(inlineKeyboard: buttons)
        
        try await sendMessage(chatId: chatId, text: historyText, replyMarkup: keyboard)
    }
    
    private func handleCancelCommand(user: User, chatId: Int64) async throws {
        // –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        let repo = UserRepository(database: app.db)
        try await repo.updateCategory(user, category: nil)
        
        try await sendMessage(
            chatId: chatId,
            text: "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
        )
    }
    
    private func handleBatchCommand(user: User, chatId: Int64) async throws {
        let batchText = """
        üì¶ *–ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è*
        
        –ó–∞–≥—Ä—É–∑–∏ TXT —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏, –∏ —è —Å–æ–∑–¥–∞–º –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö!
        
        üìù *–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:*
        ```
        –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –æ–¥–µ–∂–¥–∞
        ---
        –ü–ª–∞—Ç—å–µ –∂–µ–Ω—Å–∫–æ–µ –∫—Ä–∞—Å–Ω–æ–µ 42 —Ä–∞–∑–º–µ—Ä
        –ö—Ä–æ—Å—Å–æ–≤–∫–∏ –º—É–∂—Å–∫–∏–µ Nike –±–µ–ª—ã–µ 45
        –§—É—Ç–±–æ–ª–∫–∞ —É–Ω–∏—Å–µ–∫—Å —Ö–ª–æ–ø–æ–∫ XXL
        ```
        
        üìã *–ü—Ä–∞–≤–∏–ª–∞:*
        ‚Ä¢ –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: [–Ω–∞–∑–≤–∞–Ω–∏–µ]`
        ‚Ä¢ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: `---`
        ‚Ä¢ –ö–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ —Ä–∞–∑
        
        üí° *–†–µ–∑—É–ª—å—Ç–∞—Ç:*
        ‚Ä¢ –ü–æ–ª—É—á–∏—à—å Excel —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        ‚Ä¢ –ö–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä = 1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑ —Ç–≤–æ–µ–≥–æ –ª–∏–º–∏—Ç–∞
        
        ‚ö°Ô∏è –ó–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª, –∏ –Ω–∞—á–Ω—ë–º!
        """
        
        try await sendMessage(chatId: chatId, text: batchText)
    }
    
    // MARK: - Batch Processing (FR-6)
    
    private func handleBatchDocument(document: TelegramDocument, user: User, chatId: Int64) async throws {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        guard document.mimeType == "text/plain" || document.fileName?.hasSuffix(".txt") == true else {
            try await sendMessage(chatId: chatId, text: "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ TXT —Ñ–∞–π–ª—ã.")
            return
        }
        
        try await sendMessage(chatId: chatId, text: "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")
        
        do {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            let fileContent = try await downloadFile(fileId: document.fileId)
            
            // –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            let lines = fileContent.components(separatedBy: .newlines).filter { !$0.trimmingCharacters(in: .whitespaces).isEmpty }
            
            guard !lines.isEmpty else {
                try await sendMessage(chatId: chatId, text: "‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π.")
                return
            }
            
            // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
            guard let firstLine = lines.first, firstLine.lowercased().starts(with: "–∫–∞—Ç–µ–≥–æ—Ä–∏—è:") else {
                try await sendMessage(chatId: chatId, text: "‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '–ö–∞—Ç–µ–≥–æ—Ä–∏—è: [–Ω–∞–∑–≤–∞–Ω–∏–µ]'")
                return
            }
            
            let categoryName = firstLine.replacingOccurrences(of: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", with: "").replacingOccurrences(of: "–∫–∞—Ç–µ–≥–æ—Ä–∏—è:", with: "").trimmingCharacters(in: .whitespaces)
            
            guard let category = Constants.ProductCategory.allCases.first(where: { $0.name.lowercased().contains(categoryName.lowercased()) }) else {
                try await sendMessage(chatId: chatId, text: "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: \(categoryName)")
                return
            }
            
            // –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            guard let separatorIndex = lines.firstIndex(of: "---") else {
                try await sendMessage(chatId: chatId, text: "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å '---' –ø–æ—Å–ª–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
                return
            }
            
            // –¢–æ–≤–∞—Ä—ã –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
            let products = Array(lines[(separatorIndex + 1)...]).prefix(10) // –ú–∞–∫—Å–∏–º—É–º 10
            
            guard !products.isEmpty else {
                try await sendMessage(chatId: chatId, text: "‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ñ–∞–π–ª–µ.")
                return
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
            let repo = UserRepository(database: app.db)
            let remaining = try await repo.getRemainingGenerations(user)
            
            guard remaining >= products.count else {
                try await sendMessage(chatId: chatId, text: "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ù—É–∂–Ω–æ: \(products.count), –¥–æ—Å—Ç—É–ø–Ω–æ: \(remaining)")
                return
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏—è
            try await sendMessage(chatId: chatId, text: "üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É—é \(products.count) –æ–ø–∏—Å–∞–Ω–∏–π...")
            
            var results: [(product: String, description: ClaudeService.ProductDescription)] = []
            
            for (index, product) in products.enumerated() {
                try await sendMessage(chatId: chatId, text: "‚è≥ \(index + 1)/\(products.count): \(product.prefix(30))...")
                
                let description = try await app.claude.generateProductDescription(
                    productInfo: String(product),
                    category: category
                )
                
                results.append((product: String(product), description: description))
                
                // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á—ë—Ç—á–∏–∫
                try await repo.incrementGenerations(user)
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                try? await Task.sleep(nanoseconds: 1_000_000_000) // 1 —Å–µ–∫
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try await sendBatchResults(chatId: chatId, results: results, category: category.name, user: user)
            
            app.logger.info("‚úÖ Batch generation completed for user \(user.telegramId): \(results.count) products")
            
        } catch {
            app.logger.error("‚ùå Batch processing error: \(error)")
            try await sendMessage(chatId: chatId, text: "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: \(error.localizedDescription)")
        }
    }
    
    private func sendBatchResults(chatId: Int64, results: [(product: String, description: ClaudeService.ProductDescription)], category: String, user: User) async throws {
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        var resultText = """
        ‚úÖ *–ì–æ—Ç–æ–≤–æ! –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ \(results.count) –æ–ø–∏—Å–∞–Ω–∏–π*
        
        üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: \(category)
        
        """
        
        for (index, result) in results.enumerated() {
            resultText += "\(index + 1). \(result.product.prefix(30))... ‚úì\n"
        }
        
        try await sendMessage(chatId: chatId, text: resultText)
        
        // –°–æ–∑–¥–∞—ë–º TXT —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        var fileContent = "–ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏–π\n"
        fileContent += "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: \(category)\n"
        fileContent += "–î–∞—Ç–∞: \(Date())\n"
        fileContent += "=" + String(repeating: "=", count: 60) + "\n\n"
        
        for (index, result) in results.enumerated() {
            fileContent += "\nüì¶ –¢–û–í–ê–† \(index + 1): \(result.product)\n\n"
            fileContent += "üìù –ó–ê–ì–û–õ–û–í–û–ö:\n\(result.description.title)\n\n"
            fileContent += "üìÑ –û–ü–ò–°–ê–ù–ò–ï:\n\(result.description.description)\n\n"
            fileContent += "üéØ –ö–õ–Æ–ß–ï–í–´–ï –í–´–ì–û–î–´:\n"
            fileContent += result.description.bullets.map { "‚Ä¢ \($0)" }.joined(separator: "\n")
            fileContent += "\n\nüè∑ –•–ï–®–¢–ï–ì–ò:\n\(result.description.hashtags.joined(separator: " "))\n\n"
            fileContent += String(repeating: "-", count: 60) + "\n"
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        try await sendDocument(
            chatId: chatId,
            content: fileContent,
            filename: "batch_\(Date().timeIntervalSince1970).txt",
            caption: "üì¶ –í—Å–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ!"
        )
    }
    
    private func downloadFile(fileId: String) async throws -> String {
        // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        let getFileUrl = "https://api.telegram.org/bot\(app.environmentConfig.telegramBotToken)/getFile?file_id=\(fileId)"
        let getFileResponse = try await app.client.get(URI(string: getFileUrl))
        
        struct FileResponse: Content {
            struct Result: Content {
                let filePath: String
                
                enum CodingKeys: String, CodingKey {
                    case filePath = "file_path"
                }
            }
            let ok: Bool
            let result: Result
        }
        
        let fileInfo = try getFileResponse.content.decode(FileResponse.self)
        
        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        let downloadUrl = "https://api.telegram.org/file/bot\(app.environmentConfig.telegramBotToken)/\(fileInfo.result.filePath)"
        let downloadResponse = try await app.client.get(URI(string: downloadUrl))
        
        guard let body = downloadResponse.body, let data = body.getData(at: 0, length: body.readableBytes) else {
            throw Abort(.internalServerError, reason: "Failed to download file")
        }
        
        return String(data: data, encoding: .utf8) ?? ""
    }
    
    // MARK: - Callback Handlers
    
    private func handleCallback(_ callback: TelegramCallbackQuery) async throws {
        guard let data = callback.data else { return }
        
        app.logger.info("üîò Callback from @\(callback.from.username ?? "unknown"): \(data)")
        
        let user = try await getOrCreateUser(from: callback.from, chatId: callback.message?.chat.id ?? callback.from.id)
        let chatId = callback.message?.chat.id ?? callback.from.id
        
        // –ü–∞—Ä—Å–∏–Ω–≥ callback data
        guard let callbackData = CallbackData(rawValue: data) else {
            app.logger.warning("‚ö†Ô∏è Unknown callback data: \(data)")
            try await answerCallback(callbackId: callback.id, text: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            return
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ switch
        switch callbackData {
        case .category(let categoryRaw):
            try await handleCategorySelected(category: categoryRaw, user: user, chatId: chatId)
            
        case .quickGenerate(let categoryRaw):
            // –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - —Å—Ä–∞–∑—É –ø—Ä–æ—Å–∏–º —Ç–µ–∫—Å—Ç
            let repo = UserRepository(database: app.db)
            try await repo.updateCategory(user, category: categoryRaw)
            
            guard let category = Constants.ProductCategory(rawValue: categoryRaw) else { return }
            
            try await sendMessage(
                chatId: chatId,
                text: "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: \(category.displayName)\n\n\(Constants.BotMessage.enterProductInfo)"
            )
            
        case .newGeneration:
            try await handleGenerateCommand(user: user, chatId: chatId)
            
        case .myBalance:
            try await handleBalanceCommand(user: user, chatId: chatId)
            
        case .exportLast:
            try await handleExportFormatChoice(user: user, chatId: chatId)
            
        case .exportFormat(let format):
            if format == "excel" {
                try await handleExportExcel(user: user, chatId: chatId)
            } else {
                try await handleExportTxt(user: user, chatId: chatId)
            }
            
        case .exportAllExcel:
            try await handleExportAllExcel(user: user, chatId: chatId)
            
        case .buyPlan(let plan):
            try await handleBuyPlan(plan: plan, user: user, chatId: chatId)
            
        case .viewPackages:
            try await handleSubscribeCommand(user: user, chatId: chatId)
            
        case .copyMenu:
            try await handleCopyMenu(user: user, chatId: chatId)
            
        case .copyPart(let part):
            try await handleCopyPart(part: part, user: user, chatId: chatId, callbackId: callback.id)
            
        case .viewGeneration(let uuid):
            try await handleViewGeneration(uuid: uuid, user: user, chatId: chatId)
            
        case .improveResult(let uuid):
            try await handleImproveResult(generationUuid: uuid, user: user, chatId: chatId)
            
        case .viewHistory(let offset, let limit):
            try await handleHistoryCommand(user: user, chatId: chatId, offset: offset, limit: limit)
        }
        
        // –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å callback
        try await answerCallback(callbackId: callback.id)
    }
    
    private func handleCategorySelected(category: String, user: User, chatId: Int64) async throws {
        let repo = UserRepository(database: app.db)
        
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        try await repo.updateCategory(user, category: category)
        
        guard let productCategory = Constants.ProductCategory(rawValue: category) else {
            return
        }
        
        let text = """
        ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞: \(productCategory.displayName)
        
        \(Constants.BotMessage.enterProductInfo)
        """
        
        try await sendMessage(chatId: chatId, text: text)
    }
    
    // MARK: - Product Description Generation
    
    private func handleProductDescription(text: String, user: User, chatId: Int64) async throws {
        let repo = UserRepository(database: app.db)
        
        app.logger.info("üü¢ Starting product description generation")
        app.logger.info("  User: \(user.telegramId)")
        app.logger.info("  Text: \(text)")
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞
        guard let categoryRaw = user.selectedCategory,
              let category = Constants.ProductCategory(rawValue: categoryRaw) else {
            app.logger.warning("‚ö†Ô∏è Category not selected for user \(user.telegramId)")
            try await sendMessage(
                chatId: chatId,
                text: "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ /start"
            )
            return
        }
        
        app.logger.info("  Category: \(category.name)")
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        let remaining = try await repo.getRemainingGenerations(user)
        app.logger.info("  Remaining generations: \(remaining)")
        
        guard try await repo.hasGenerationsAvailable(user) else {
            app.logger.warning("‚ö†Ô∏è User \(user.telegramId) exceeded limit")
            try await sendMessage(chatId: chatId, text: Constants.BotMessage.limitExceeded)
            return
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        let progressMessage = try await sendMessage(
            chatId: chatId,
            text: "‚è≥ *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–≤–∞—Ä...* üîç"
        )
        
        do {
            app.logger.info("üü¢ Calling Claude API...")
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            Task {
                try? await Task.sleep(nanoseconds: 3_000_000_000)
                try? await editMessage(
                    chatId: chatId,
                    messageId: progressMessage,
                    text: "‚è≥ *–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ...* ‚úçÔ∏è"
                )
            }
            
            // –í—ã–∑–≤–∞—Ç—å Claude API
            let description = try await app.claude.generateProductDescription(
                productInfo: text,
                category: category
            )
            
            app.logger.info("üü¢ Claude API responded successfully")
            app.logger.info("  Tokens used: \(description.tokensUsed)")
            app.logger.info("  Processing time: \(description.processingTimeMs)ms")
            app.logger.info("  Title: \(description.title)")
            
            // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
            app.logger.info("üü¢ Saving to database...")
            
            let generation = Generation(
                userId: user.id!,
                category: category.rawValue,
                productName: text,
                productDetails: text,
                tokensUsed: description.tokensUsed,
                processingTimeMs: description.processingTimeMs
            )
            generation.resultTitle = description.title
            generation.resultDescription = description.description
            generation.resultBullets = description.bullets
            generation.resultHashtags = description.hashtags
            
            try await generation.save(on: app.db)
            app.logger.info("üü¢ Saved to database: \(generation.id?.uuidString ?? "unknown")")
            
            // –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
            try await repo.incrementGenerations(user)
            app.logger.info("üü¢ Incremented user counter. Used: \(user.generationsUsed + 1)")
            
            // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            app.logger.info("üü¢ Sending result to user...")
            try await sendGenerationResult(
                chatId: chatId,
                description: description,
                user: user
            )
            
            app.logger.info("‚úÖ Successfully generated description for user \(user.telegramId) in \(description.processingTimeMs)ms")
            
        } catch {
            app.logger.error("‚ùå Generation error: \(error)")
            app.logger.error("‚ùå Error type: \(type(of: error))")
            app.logger.error("‚ùå Error description: \(String(describing: error))")
            
            try await sendMessage(chatId: chatId, text: Constants.BotMessage.error)
        }
    }
    
    private func sendGenerationResult(
        chatId: Int64,
        description: ClaudeService.ProductDescription,
        user: User
    ) async throws {
        let repo = UserRepository(database: app.db)
        let remainingText = try await repo.getRemainingGenerations(user)
        let remainingPhoto = try await repo.getRemainingPhotoGenerations(user)
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        let currentCategory = user.selectedCategory.flatMap { Constants.ProductCategory(rawValue: $0) }
        
        // –°–û–û–ë–©–ï–ù–ò–ï 1: –ó–∞–≥–æ–ª–æ–≤–æ–∫ + –û–ø–∏—Å–∞–Ω–∏–µ
        let message1 = """
        ‚úÖ *–ì–æ—Ç–æ–≤–æ!*
        
        üìù *–ó–ê–ì–û–õ–û–í–û–ö:*
        \(description.title)
        
        üìÑ *–û–ü–ò–°–ê–ù–ò–ï:*
        \(description.description)
        """
        
        try await sendMessage(chatId: chatId, text: message1)
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        try? await Task.sleep(nanoseconds: 500_000_000) // 0.5 —Å–µ–∫
        
        // –°–û–û–ë–©–ï–ù–ò–ï 2: Bullets
        let bulletsText = description.bullets.map { "‚Ä¢ \($0)" }.joined(separator: "\n")
        
        let message2 = """
        üéØ *–ö–õ–Æ–ß–ï–í–´–ï –í–´–ì–û–î–´:*
        
        \(bulletsText)
        """
        
        try await sendMessage(chatId: chatId, text: message2)
        
        try? await Task.sleep(nanoseconds: 500_000_000)
        
        // –°–û–û–ë–©–ï–ù–ò–ï 3: –•–µ—à—Ç–µ–≥–∏ + –∫–Ω–æ–ø–∫–∏
        let hashtagsText = description.hashtags.joined(separator: " ")
        
        let message3 = """
        üè∑ *–•–ï–®–¢–ï–ì–ò:*
        \(hashtagsText)
        
        ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
        ‚ö°Ô∏è *–û—Å—Ç–∞–ª–æ—Å—å:* \(remainingText) —Ç–µ–∫—Å—Ç–æ–≤ + \(remainingPhoto) —Ñ–æ—Ç–æ
        """
        
        // –£–º–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        var buttons: [[TelegramInlineKeyboardButton]] = []
        
        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if let category = currentCategory {
            buttons.append([
                TelegramInlineKeyboardButton(
                    text: "üîÑ –ï—â—ë \(category.emoji) \(category.name)",
                    callbackData: "quick_generate_\(category.rawValue)"
                )
            ])
        }
        
        // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –¥—Ä—É–≥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è + –±–∞–ª–∞–Ω—Å
        buttons.append([
            TelegramInlineKeyboardButton(text: "üîÑ –î—Ä—É–≥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callbackData: "new_generation"),
            TelegramInlineKeyboardButton(text: "üí∞ –ë–∞–ª–∞–Ω—Å", callbackData: "my_balance")
        ])
        
        // –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞: –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —á–∞—Å—Ç—è–º
        buttons.append([
            TelegramInlineKeyboardButton(text: "üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç–∏", callbackData: "copy_menu")
        ])
        
        // –ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞: —ç–∫—Å–ø–æ—Ä—Ç + –ø–æ–¥–ø–∏—Å–∫–∞
        buttons.append([
            TelegramInlineKeyboardButton(text: "üìÑ –≠–∫—Å–ø–æ—Ä—Ç", callbackData: "export_last"),
            TelegramInlineKeyboardButton(text: "üíé –ü–∞–∫–µ—Ç—ã", callbackData: "view_packages")
        ])
        
        let keyboard = TelegramReplyMarkup(inlineKeyboard: buttons)
        
        try await sendMessage(chatId: chatId, text: message3, replyMarkup: keyboard)
    }
    
    // MARK: - Photo Description Generation
    
    private func handlePhotoDescription(
        photos: [TelegramPhotoSize],
        caption: String?,
        user: User,
        chatId: Int64
    ) async throws {
        let repo = UserRepository(database: app.db)
        let plan = try await repo.getCurrentPlan(user)
        
        app.logger.info("üì∑ Photo generation request from user \(user.telegramId)")
        app.logger.info("  Current plan: \(plan.name)")
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞
        guard let categoryRaw = user.selectedCategory,
              let category = Constants.ProductCategory(rawValue: categoryRaw) else {
            try await sendMessage(
                chatId: chatId,
                text: "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ /start"
            )
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –§–û–¢–û (–æ—Ç–¥–µ–ª—å–Ω–æ!)
        let remainingPhoto = try await repo.getRemainingPhotoGenerations(user)
        app.logger.info("  Remaining photo generations: \(remainingPhoto)")
        
        guard try await repo.hasPhotoGenerationsAvailable(user) else {
            let upgradeText = """
            üì∑ *–õ–∏–º–∏—Ç —Ñ–æ—Ç–æ –∏—Å—á–µ—Ä–ø–∞–Ω!*
            
            –¢–≤–æ–π –ø–ª–∞–Ω: *\(plan.emoji) \(plan.name)*
            –û—Å—Ç–∞–ª–æ—Å—å —Ñ–æ—Ç–æ: *0*
            
            –û–±–Ω–æ–≤–∏ –ø–∞–∫–µ—Ç –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø–∏—Å–∞–Ω–∏–π –ø–æ —Ñ–æ—Ç–æ:
            
            üì¶ –ú–∞–ª—ã–π (299‚ÇΩ): 20 –æ–ø–∏—Å–∞–Ω–∏–π (3 —Ñ–æ—Ç–æ)
            üì¶üì¶ –°—Ä–µ–¥–Ω–∏–π (599‚ÇΩ): 50 –æ–ø–∏—Å–∞–Ω–∏–π (5 —Ñ–æ—Ç–æ)
            üì¶üì¶üì¶ –ë–æ–ª—å—à–æ–π (999‚ÇΩ): 100 –æ–ø–∏—Å–∞–Ω–∏–π (10 —Ñ–æ—Ç–æ)
            üéÅüíé –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π (1,399‚ÇΩ): 200 –æ–ø–∏—Å–∞–Ω–∏–π (20 —Ñ–æ—Ç–æ)
            
            /subscribe - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø–∞–∫–µ—Ç—ã
            """
            
            try await sendMessage(chatId: chatId, text: upgradeText)
            return
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ..."
        try await sendMessage(chatId: chatId, text: "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 15-20 —Å–µ–∫—É–Ω–¥.")
        
        do {
            // –ü–æ–ª—É—á–∏—Ç—å —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            guard let largestPhoto = photos.max(by: { $0.fileSize ?? 0 < $1.fileSize ?? 0 }) else {
                throw BotError.telegramAPIError(.badRequest)
            }
            
            // –°–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ
            let imageData = try await downloadPhoto(fileId: largestPhoto.fileId)
            app.logger.info("  Downloaded photo: \(imageData.count) bytes")
            
            // –°–ñ–ê–¢–¨ —Ñ–æ—Ç–æ –¥–æ 1024x1024 (—ç–∫–æ–Ω–æ–º–∏—è —Ç–æ–∫–µ–Ω–æ–≤!)
            let compressedImage = try await compressImage(imageData, maxSize: 1024)
            app.logger.info("  Compressed photo: \(compressedImage.count) bytes (saved \(imageData.count - compressedImage.count) bytes)")
            
            // –í—ã–∑–≤–∞—Ç—å Claude Vision API
            let additionalContext = caption ?? "–¢–æ–≤–∞—Ä –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"
            let description = try await app.claude.generateProductDescriptionFromPhoto(
                imageData: compressedImage,
                productInfo: additionalContext,
                category: category
            )
            
            // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
            let generation = Generation(
                userId: user.id!,
                category: category.rawValue,
                productName: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ñ–æ—Ç–æ",
                productDetails: additionalContext,
                tokensUsed: description.tokensUsed,
                processingTimeMs: description.processingTimeMs
            )
            generation.resultTitle = description.title
            generation.resultDescription = description.description
            generation.resultBullets = description.bullets
            generation.resultHashtags = description.hashtags
            
            try await generation.save(on: app.db)
            
            // –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –§–û–¢–û (–æ—Ç–¥–µ–ª—å–Ω–æ!)
            try await repo.incrementPhotoGenerations(user)
            
            // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try await sendGenerationResult(
                chatId: chatId,
                description: description,
                user: user
            )
            
            app.logger.info("‚úÖ Generated description from photo for user \(user.telegramId)")
            
        } catch {
            app.logger.error("‚ùå Photo generation error: \(error)")
            try await sendMessage(chatId: chatId, text: Constants.BotMessage.error)
        }
    }
    
    private func compressImage(_ imageData: Data, maxSize: Int) async throws -> Data {
        // –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ 200KB, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –æ–Ω–æ –±–æ–ª—å—à–æ–µ
        // –í production –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CoreGraphics –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è
        
        let maxBytes = 200 * 1024 // 200KB
        
        if imageData.count <= maxBytes {
            app.logger.debug("  Image already small enough: \(imageData.count) bytes")
            return imageData
        }
        
        // –î–ª—è production: –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ —á–µ—Ä–µ–∑ CoreGraphics
        // –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å –∏ –ª–æ–≥–∏—Ä—É–µ–º
        app.logger.warning("  Image is large (\(imageData.count) bytes), but compression not implemented yet")
        app.logger.info("  TODO: Add CoreGraphics compression to \(maxSize)x\(maxSize)")
        
        return imageData
    }
    
    private func downloadPhoto(fileId: String) async throws -> Data {
        // –ü–æ–ª—É—á–∏—Ç—å file_path —á–µ—Ä–µ–∑ getFile API
        struct GetFileResponse: Content {
            let ok: Bool
            let result: FileInfo
        }
        
        struct FileInfo: Content {
            let filePath: String
            
            enum CodingKeys: String, CodingKey {
                case filePath = "file_path"
            }
        }
        
        let uri = URI(string: "\(baseURL)/getFile")
        
        let response = try await app.client.post(uri) { req in
            try req.content.encode(["file_id": fileId])
        }
        
        guard response.status == .ok else {
            throw BotError.telegramAPIError(response.status)
        }
        
        let fileResponse = try response.content.decode(GetFileResponse.self)
        
        // –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
        let fileURL = "https://api.telegram.org/file/bot\(botToken)/\(fileResponse.result.filePath)"
        let fileUri = URI(string: fileURL)
        
        let fileDataResponse = try await app.client.get(fileUri)
        
        guard fileDataResponse.status == .ok,
              let buffer = fileDataResponse.body else {
            throw BotError.telegramAPIError(.notFound)
        }
        
        return Data(buffer: buffer)
    }
    
    // MARK: - Export & Buy Handlers
    
    private func handleExportFormatChoice(user: User, chatId: Int64) async throws {
        let formatText = """
        üìÑ *–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:*
        """
        
        let keyboard = TelegramReplyMarkup(inlineKeyboard: [
            [
                TelegramInlineKeyboardButton(text: "üìä Excel (.xlsx)", callbackData: "export_excel"),
                TelegramInlineKeyboardButton(text: "üìÑ –¢–µ–∫—Å—Ç (.txt)", callbackData: "export_txt")
            ]
        ])
        
        try await sendMessage(chatId: chatId, text: formatText, replyMarkup: keyboard)
    }
    
    private func handleExportExcel(user: User, chatId: Int64) async throws {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å Excel export —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        try await sendMessage(
            chatId: chatId,
            text: "üìä Excel —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π TXT —Ñ–æ—Ä–º–∞—Ç."
        )
    }
    
    private func handleExportAllExcel(user: User, chatId: Int64) async throws {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–∞—Å—Å–æ–≤—ã–π Excel export
        try await sendMessage(
            chatId: chatId,
            text: "üìä –ú–∞—Å—Å–æ–≤—ã–π Excel —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!\n\n–ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —ç–∫—Å–ø–æ—Ä—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ /history"
        )
    }
    
    private func handleExportTxt(user: User, chatId: Int64) async throws {
        // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        let lastGeneration = try await Generation.query(on: app.db)
            .filter(\.$user.$id == user.id!)
            .sort(\.$createdAt, .descending)
            .first()
        
        guard let generation = lastGeneration,
              let title = generation.resultTitle,
              let description = generation.resultDescription,
              let bullets = generation.resultBullets,
              let hashtags = generation.resultHashtags else {
            try await sendMessage(
                chatId: chatId,
                text: "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–ø–∏—Å–∞–Ω–∏–µ!"
            )
            return
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        let bulletsText = bullets.map { "‚Ä¢ \($0)" }.joined(separator: "\n")
        let hashtagsText = hashtags.joined(separator: " ")
        
        let fileContent = """
        üìù –û–ü–ò–°–ê–ù–ò–ï –¢–û–í–ê–†–ê
        –°–æ–∑–¥–∞–Ω–æ: –ö–∞—Ä—Ç–æ—á–∫–∞–ü–†–û AI Bot
        –î–∞—Ç–∞: \(generation.createdAt?.formatted() ?? "")
        
        ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        
        –ó–ê–ì–û–õ–û–í–û–ö:
        \(title)
        
        ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        
        –û–ü–ò–°–ê–ù–ò–ï:
        \(description)
        
        ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        
        –ö–õ–Æ–ß–ï–í–´–ï –í–´–ì–û–î–´:
        \(bulletsText)
        
        ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        
        –•–ï–®–¢–ï–ì–ò:
        \(hashtagsText)
        
        ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        
        –ö–∞—Ç–µ–≥–æ—Ä–∏—è: \(generation.category)
        –¢–æ–∫–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: \(generation.tokensUsed)
        –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: \(generation.processingTimeMs)ms
        
        –°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ @kartochka_pro_bot
        """
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        try await sendDocument(
            chatId: chatId,
            content: fileContent,
            filename: "opisanie_\(generation.id?.uuidString.prefix(8) ?? "export").txt",
            caption: "üìÑ –¢–≤–æ—ë –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!"
        )
        
        app.logger.info("‚úÖ Exported generation \(generation.id?.uuidString ?? "unknown") for user \(user.telegramId)")
    }
    
    private func handleBuyPlan(plan: String, user: User, chatId: Int64) async throws {
        // –ü–æ–∫–∞ Tribute –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        let buyText = """
        üíé *–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ \(plan.capitalized)*
        
        ‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ–ø–ª–∞—Ç—ã –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!
        
        –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:
        ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Tribute
        ‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        ‚Ä¢ –ê–≤—Ç–æ—Ä–µ–Ω–µ–≤ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
        
        –ê –ø–æ–∫–∞ –ø–æ–ª—å–∑—É–π—Å—è Free –ø–ª–∞–Ω–æ–º (3 –æ–ø–∏—Å–∞–Ω–∏—è).
        
        –•–æ—á–µ—à—å –±–æ–ª—å—à–µ –æ–ø–∏—Å–∞–Ω–∏–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?
        –ù–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @vskamnev
        """
        
        try await sendMessage(chatId: chatId, text: buyText)
    }
    
    // MARK: - Copy Parts Feature (FR-8)
    
    private func handleCopyMenu(user: User, chatId: Int64) async throws {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        let hasGenerations = try await Generation.query(on: app.db)
            .filter(\.$user.$id == user.id!)
            .count() > 0
        
        guard hasGenerations else {
            try await sendMessage(chatId: chatId, text: "‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        }
        
        let menuText = """
        üìã *–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —á–∞—Å—Ç—è–º*
        
        –í—ã–±–µ—Ä–∏, —á—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:
        """
        
        let buttons: [[TelegramInlineKeyboardButton]] = [
            [TelegramInlineKeyboardButton(text: "üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫", callbackData: "copy_title")],
            [TelegramInlineKeyboardButton(text: "üìÑ –û–ø–∏—Å–∞–Ω–∏–µ", callbackData: "copy_description")],
            [TelegramInlineKeyboardButton(text: "üéØ –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≥–æ–¥—ã", callbackData: "copy_bullets")],
            [TelegramInlineKeyboardButton(text: "üè∑ –•–µ—à—Ç–µ–≥–∏", callbackData: "copy_hashtags")],
            [TelegramInlineKeyboardButton(text: "üìã –í—Å—ë —Å—Ä–∞–∑—É", callbackData: "copy_all")]
        ]
        
        let keyboard = TelegramReplyMarkup(inlineKeyboard: buttons)
        
        try await sendMessage(chatId: chatId, text: menuText, replyMarkup: keyboard)
    }
    
    private func handleCopyPart(part: String, user: User, chatId: Int64, callbackId: String) async throws {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        guard let lastGeneration = try await Generation.query(on: app.db)
            .filter(\.$user.$id == user.id!)
            .sort(\.$createdAt, .descending)
            .first() else {
            try await answerCallback(callbackId: callbackId, text: "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        }
        
        let content: String
        let label: String
        
        switch part {
        case "title":
            content = lastGeneration.resultTitle ?? ""
            label = "üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫"
        case "description":
            content = lastGeneration.resultDescription ?? ""
            label = "üìÑ –û–ø–∏—Å–∞–Ω–∏–µ"
        case "bullets":
            content = (lastGeneration.resultBullets ?? []).joined(separator: "\n")
            label = "üéØ –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≥–æ–¥—ã"
        case "hashtags":
            content = (lastGeneration.resultHashtags ?? []).joined(separator: " ")
            label = "üè∑ –•–µ—à—Ç–µ–≥–∏"
        case "all":
            let bullets = (lastGeneration.resultBullets ?? []).joined(separator: "\n")
            let hashtags = (lastGeneration.resultHashtags ?? []).joined(separator: " ")
            content = """
            \(lastGeneration.resultTitle ?? "")
            
            \(lastGeneration.resultDescription ?? "")
            
            \(bullets)
            
            \(hashtags)
            """
            label = "üìã –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
        default:
            try await answerCallback(callbackId: callbackId, text: "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —á–∞—Å—Ç—å")
            return
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        try await sendMessage(chatId: chatId, text: "```\n\(content)\n```")
        try await answerCallback(callbackId: callbackId, text: "‚úÖ \(label) —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!")
    }
    
    // MARK: - View Generation Feature
    
    private func handleViewGeneration(uuid: String, user: User, chatId: Int64) async throws {
        guard let generationUuid = UUID(uuidString: uuid),
              let generation = try await Generation.find(generationUuid, on: app.db) else {
            try await sendMessage(chatId: chatId, text: "‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        let bullets = (generation.resultBullets ?? []).map { "‚Ä¢ \($0)" }.joined(separator: "\n")
        let hashtags = (generation.resultHashtags ?? []).joined(separator: " ")
        
        let resultText = """
        ‚úÖ *–¢–≤–æ—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è*
        
        üìù *–ó–ê–ì–û–õ–û–í–û–ö:*
        \(generation.resultTitle ?? "")
        
        üìÑ *–û–ü–ò–°–ê–ù–ò–ï:*
        \(generation.resultDescription ?? "")
        
        üéØ *–ö–õ–Æ–ß–ï–í–´–ï –í–´–ì–û–î–´:*
        \(bullets)
        
        üè∑ *–•–ï–®–¢–ï–ì–ò:*
        \(hashtags)
        """
        
        let buttons: [[TelegramInlineKeyboardButton]] = [
            [
                TelegramInlineKeyboardButton(text: "‚ú® –£–ª—É—á—à–∏—Ç—å —ç—Ç–æ", callbackData: "improve_\(uuid)"),
                TelegramInlineKeyboardButton(text: "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callbackData: "copy_menu")
            ],
            [
                TelegramInlineKeyboardButton(text: "üìÑ –≠–∫—Å–ø–æ—Ä—Ç", callbackData: "export_last")
            ]
        ]
        
        let keyboard = TelegramReplyMarkup(inlineKeyboard: buttons)
        
        try await sendMessage(chatId: chatId, text: resultText, replyMarkup: keyboard)
    }
    
    // MARK: - Improve Result Feature (FR-5)
    
    private func handleImproveResult(generationUuid: String, user: User, chatId: Int64) async throws {
        // –ù–∞—Ö–æ–¥–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        guard let uuid = UUID(uuidString: generationUuid),
              let generation = try await Generation.find(uuid, on: app.db) else {
            try await sendMessage(chatId: chatId, text: "‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        let repo = UserRepository(database: app.db)
        guard try await repo.hasGenerationsAvailable(user) else {
            try await sendMessage(chatId: chatId, text: Constants.BotMessage.limitExceeded)
            return
        }
        
        // –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ —É–ª—É—á—à–∏—Ç—å
        let improveText = """
        ‚ú® *–£–ª—É—á—à–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è*
        
        –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:
        _\((generation.resultTitle ?? "").prefix(50))..._
        
        –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–ª—É—á—à–∏—Ç—å:
        
        –ù–∞–ø—Ä–∏–º–µ—Ä:
        ‚Ä¢ "–°–¥–µ–ª–∞–π –±–æ–ª–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º"
        ‚Ä¢ "–î–æ–±–∞–≤—å –±–æ–ª—å—à–µ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏"
        ‚Ä¢ "–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—á–µ"
        ‚Ä¢ "–£–ø–æ—Ä –Ω–∞ —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å"
        
        –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.
        """
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º UUID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
        user.selectedCategory = "improve_\(generationUuid)"
        try await user.save(on: app.db)
        
        try await sendMessage(chatId: chatId, text: improveText)
    }
    
    private func handleImproveInput(text: String, user: User, chatId: Int64) async throws {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º UUID –∏–∑ selectedCategory
        guard let category = user.selectedCategory,
              category.starts(with: "improve_"),
              let uuidString = category.split(separator: "_").last,
              let uuid = UUID(uuidString: String(uuidString)),
              let originalGeneration = try await Generation.find(uuid, on: app.db) else {
            try await sendMessage(chatId: chatId, text: "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
            return
        }
        
        // –û—á–∏—â–∞–µ–º selectedCategory
        user.selectedCategory = nil
        try await user.save(on: app.db)
        
        app.logger.info("‚ú® Improving generation \(uuid) for user \(user.telegramId)")
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        let progressMessage = try await sendMessage(
            chatId: chatId,
            text: "‚è≥ *–£–ª—É—á—à–∞—é –æ–ø–∏—Å–∞–Ω–∏–µ...* ‚ú®"
        )
        
        do {
            // –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
            let bullets = (originalGeneration.resultBullets ?? []).joined(separator: "\n")
            let hashtags = (originalGeneration.resultHashtags ?? []).joined(separator: " ")
            
            let improvePrompt = """
            –ó–ê–î–ê–ß–ê: –£–ª—É—á—à–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º –∫–ª–∏–µ–Ω—Ç–∞.
            
            –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ï –û–ü–ò–°–ê–ù–ò–ï:
            –ó–∞–≥–æ–ª–æ–≤–æ–∫: \(originalGeneration.resultTitle ?? "")
            –û–ø–∏—Å–∞–Ω–∏–µ: \(originalGeneration.resultDescription ?? "")
            –í—ã–≥–æ–¥—ã: \(bullets)
            –•–µ—à—Ç–µ–≥–∏: \(hashtags)
            
            –ü–û–ñ–ï–õ–ê–ù–ò–Ø –ö–õ–ò–ï–ù–¢–ê:
            \(text)
            
            –°–æ–∑–¥–∞–π –£–õ–£–ß–®–ï–ù–ù–£–Æ –≤–µ—Ä—Å–∏—é —Å —É—á—ë—Ç–æ–º –ø–æ–∂–µ–ª–∞–Ω–∏–π. –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ, bullets, hashtags).
            """
            
            // –í—ã–∑—ã–≤–∞–µ–º Claude API
            guard let category = Constants.ProductCategory(rawValue: originalGeneration.category) else {
                throw Abort(.badRequest, reason: "Invalid category")
            }
            
            let description = try await app.claude.generateProductDescription(
                productInfo: improvePrompt,
                category: category
            )
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            let generation = Generation(
                userId: user.id!,
                category: originalGeneration.category,
                productName: "‚ú® –£–ª—É—á—à–µ–Ω–∏–µ: \(originalGeneration.productName)",
                productDetails: text
            )
            generation.resultTitle = description.title
            generation.resultDescription = description.description
            generation.resultBullets = description.bullets
            generation.resultHashtags = description.hashtags
            try await generation.save(on: app.db)
            
            // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á—ë—Ç—á–∏–∫
            let repo = UserRepository(database: app.db)
            try await repo.incrementGenerations(user)
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try await sendGenerationResult(chatId: chatId, description: description, user: user)
            
            app.logger.info("‚úÖ Successfully improved generation for user \(user.telegramId)")
            
        } catch {
            app.logger.error("‚ùå Error improving generation: \(error)")
            try await sendMessage(chatId: chatId, text: Constants.BotMessage.error)
        }
    }
    
    // MARK: - Helpers
    
    private func getOrCreateUser(from telegramUser: TelegramUser, chatId: Int64) async throws -> User {
        let repo = UserRepository(database: app.db)
        return try await repo.getOrCreate(
            telegramId: telegramUser.id,
            username: telegramUser.username,
            firstName: telegramUser.firstName,
            lastName: telegramUser.lastName
        )
    }
    
    private func createCategoryKeyboard() -> TelegramReplyMarkup {
        let categories = Constants.ProductCategory.allCases
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
        var rows: [[TelegramInlineKeyboardButton]] = []
        var currentRow: [TelegramInlineKeyboardButton] = []
        
        for category in categories {
            let button = TelegramInlineKeyboardButton(
                text: category.displayName,
                callbackData: "category_\(category.rawValue)"
            )
            currentRow.append(button)
            
            if currentRow.count == 2 {
                rows.append(currentRow)
                currentRow = []
            }
        }
        
        // –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫
        if !currentRow.isEmpty {
            rows.append(currentRow)
        }
        
        return TelegramReplyMarkup(inlineKeyboard: rows)
    }
    
    // MARK: - Telegram API
    
    @discardableResult
    func sendMessage(
        chatId: Int64,
        text: String,
        parseMode: String = "Markdown",
        replyMarkup: TelegramReplyMarkup? = nil
    ) async throws -> Int64? {
        let uri = URI(string: "\(baseURL)/sendMessage")
        
        let response = try await app.client.post(uri) { req in
            try req.content.encode(TelegramSendMessage(
                chatId: chatId,
                text: text,
                parseMode: parseMode,
                replyMarkup: replyMarkup
            ))
        }
        
        guard response.status == HTTPResponseStatus.ok else {
            throw BotError.telegramAPIError(response.status)
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º message_id –∏–∑ –æ—Ç–≤–µ—Ç–∞
        struct SendMessageResponse: Content {
            let ok: Bool
            let result: MessageResult
            
            struct MessageResult: Content {
                let messageId: Int64
                
                enum CodingKeys: String, CodingKey {
                    case messageId = "message_id"
                }
            }
        }
        
        let sendResponse = try? response.content.decode(SendMessageResponse.self)
        return sendResponse?.result.messageId
    }
    
    func editMessage(
        chatId: Int64,
        messageId: Int64?,
        text: String,
        parseMode: String = "Markdown"
    ) async throws {
        guard let messageId = messageId else { return }
        
        struct EditMessageText: Content {
            let chatId: Int64
            let messageId: Int64
            let text: String
            let parseMode: String?
            
            enum CodingKeys: String, CodingKey {
                case chatId = "chat_id"
                case messageId = "message_id"
                case text
                case parseMode = "parse_mode"
            }
        }
        
        let uri = URI(string: "\(baseURL)/editMessageText")
        
        _ = try await app.client.post(uri) { req in
            try req.content.encode(EditMessageText(
                chatId: chatId,
                messageId: messageId,
                text: text,
                parseMode: parseMode
            ))
        }
    }
    
    private func answerCallback(callbackId: String, text: String? = nil) async throws {
        struct AnswerCallbackQuery: Content {
            let callback_query_id: String
            let text: String?
        }
        
        let uri = URI(string: "\(baseURL)/answerCallbackQuery")
        
        _ = try await app.client.post(uri) { req in
            try req.content.encode(AnswerCallbackQuery(
                callback_query_id: callbackId,
                text: text
            ))
        }
    }
    
    private func sendDocument(
        chatId: Int64,
        content: String,
        filename: String,
        caption: String? = nil
    ) async throws {
        // –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        let tempDir = FileManager.default.temporaryDirectory
        let fileURL = tempDir.appendingPathComponent(filename)
        
        try content.write(to: fileURL, atomically: true, encoding: .utf8)
        
        defer {
            try? FileManager.default.removeItem(at: fileURL)
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram API
        let uri = URI(string: "\(baseURL)/sendDocument")
        
        let response = try await app.client.post(uri) { req in
            let boundary = UUID().uuidString
            req.headers.contentType = HTTPMediaType(type: "multipart", subType: "form-data", parameters: ["boundary": boundary])
            
            var body = ByteBuffer()
            
            // chat_id
            body.writeString("--\(boundary)\r\n")
            body.writeString("Content-Disposition: form-data; name=\"chat_id\"\r\n\r\n")
            body.writeString("\(chatId)\r\n")
            
            // document (file)
            body.writeString("--\(boundary)\r\n")
            body.writeString("Content-Disposition: form-data; name=\"document\"; filename=\"\(filename)\"\r\n")
            body.writeString("Content-Type: text/plain\r\n\r\n")
            
            let fileData = try Data(contentsOf: fileURL)
            body.writeData(fileData)
            body.writeString("\r\n")
            
            // caption
            if let caption = caption {
                body.writeString("--\(boundary)\r\n")
                body.writeString("Content-Disposition: form-data; name=\"caption\"\r\n\r\n")
                body.writeString(caption)
                body.writeString("\r\n")
            }
            
            body.writeString("--\(boundary)--\r\n")
            
            req.body = body
        }
        
        guard response.status == HTTPResponseStatus.ok else {
            throw BotError.telegramAPIError(response.status)
        }
    }
    
    // MARK: - Errors
    
    enum BotError: Error {
        case telegramAPIError(HTTPResponseStatus)
        case userNotFound
        case limitExceeded
    }
    
    // MARK: - Callback Data
    
    enum CallbackData {
        case category(String)
        case newGeneration
        case quickGenerate(String) // –±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        case myBalance
        case exportLast
        case buyPlan(String)
        case viewPackages
        case exportFormat(String) // "excel" or "txt"
        case exportAllExcel
        case copyMenu // –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        case copyPart(String) // "title", "description", "bullets", "hashtags", "all"
        case viewGeneration(String) // UUID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        case improveResult(String) // UUID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
        case viewHistory(Int, Int) // offset, limit
        
        init?(rawValue: String) {
            if rawValue.starts(with: "category_") {
                let category = String(rawValue.dropFirst("category_".count))
                self = .category(category)
            } else if rawValue.starts(with: "quick_generate_") {
                let category = String(rawValue.dropFirst("quick_generate_".count))
                self = .quickGenerate(category)
            } else if rawValue == "new_generation" {
                self = .newGeneration
            } else if rawValue == "my_balance" {
                self = .myBalance
            } else if rawValue == "export_last" {
                self = .exportLast
            } else if rawValue.starts(with: "buy_") {
                let plan = String(rawValue.dropFirst("buy_".count))
                self = .buyPlan(plan)
            } else if rawValue == "view_packages" {
                self = .viewPackages
            } else if rawValue == "export_all_excel" {
                self = .exportAllExcel
            } else if rawValue == "copy_menu" {
                self = .copyMenu
            } else if rawValue.starts(with: "copy_") {
                let part = String(rawValue.dropFirst("copy_".count))
                self = .copyPart(part)
            } else if rawValue.starts(with: "view_gen_") {
                let uuid = String(rawValue.dropFirst("view_gen_".count))
                self = .viewGeneration(uuid)
            } else if rawValue.starts(with: "improve_") {
                let uuid = String(rawValue.dropFirst("improve_".count))
                self = .improveResult(uuid)
            } else if rawValue.starts(with: "history_") {
                let parts = rawValue.dropFirst("history_".count).split(separator: "_")
                if parts.count == 2, let offset = Int(parts[0]), let limit = Int(parts[1]) {
                    self = .viewHistory(offset, limit)
                } else {
                    return nil
                }
            } else if rawValue.starts(with: "export_") {
                let format = String(rawValue.dropFirst("export_".count))
                self = .exportFormat(format)
            } else {
                return nil
            }
        }
    }
}

// MARK: - Application Extension

extension Application {
    private struct TelegramBotServiceKey: StorageKey {
        typealias Value = TelegramBotService
    }
    
    var telegramBot: TelegramBotService {
        get {
            guard let service = storage[TelegramBotServiceKey.self] else {
                fatalError("TelegramBotService not configured")
            }
            return service
        }
        set {
            storage[TelegramBotServiceKey.self] = newValue
        }
    }
}


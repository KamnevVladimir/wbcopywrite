import Vapor
import Fluent

/// Telegram Bot Service - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
final class TelegramBotService: @unchecked Sendable {
    private let app: Application
    private let botToken: String
    private let baseURL: String
    
    init(app: Application, botToken: String) {
        self.app = app
        self.botToken = botToken
        self.baseURL = "https://api.telegram.org/bot\(botToken)"
    }
    
    // MARK: - Public API
    
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
    func handleUpdate(_ update: TelegramUpdate) async {
        do {
            if let message = update.message {
                try await handleMessage(message)
            }
            
            if let callback = update.callbackQuery {
                try await handleCallback(callback)
            }
        } catch {
            app.logger.error("‚ùå Error handling update #\(update.updateId): \(error)")
        }
    }
    
    // MARK: - Message Handlers
    
    private func handleMessage(_ message: TelegramMessage) async throws {
        let user = try await getOrCreateUser(from: message.from, chatId: message.chat.id)
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if let photos = message.photo, !photos.isEmpty {
            app.logger.info("üì∑ Photo from @\(message.from.username ?? "unknown")")
            try await handlePhotoDescription(photos: photos, caption: message.caption, user: user, chatId: message.chat.id)
            return
        }
        
        guard let text = message.text else { return }
        
        app.logger.info("üí¨ Message from @\(message.from.username ?? "unknown"): \(text)")
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if text.starts(with: "/") {
            try await handleCommand(text, user: user, chatId: message.chat.id)
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            try await handleProductDescription(text: text, user: user, chatId: message.chat.id)
        }
    }
    
    private func handleCommand(_ command: String, user: User, chatId: Int64) async throws {
        switch command {
        case "/start":
            try await handleStartCommand(user: user, chatId: chatId)
            
        case "/help":
            try await handleHelpCommand(chatId: chatId)
            
        case "/generate":
            try await handleGenerateCommand(user: user, chatId: chatId)
            
        case "/balance":
            try await handleBalanceCommand(user: user, chatId: chatId)
            
        case "/subscribe":
            try await handleSubscribeCommand(user: user, chatId: chatId)
            
        case "/cancel":
            try await handleCancelCommand(user: user, chatId: chatId)
            
        default:
            try await sendMessage(
                chatId: chatId,
                text: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
            )
        }
    }
    
    // MARK: - Command Implementations
    
    private func handleStartCommand(user: User, chatId: Int64) async throws {
        let repo = UserRepository(database: app.db)
        let plan = try await repo.getCurrentPlan(user)
        let remaining = try await repo.getRemainingGenerations(user)
        
        let welcomeText = """
        üëã –ü—Ä–∏–≤–µ—Ç, \(user.displayName)!
        
        üéØ –Ø –ö–∞—Ä—Ç–æ—á–∫–∞–ü–†–û ‚Äî —Ç–≤–æ–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥–∞—é—â–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries –∏ Ozon.
        
        üìä –¢–≤–æ–π –ø–ª–∞–Ω: \(plan.name)
        –û—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: \(remaining)
        
        üöÄ –ß—Ç–æ —è —É–º–µ—é:
        ‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä—É—é SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
        ‚Ä¢ –°–æ–∑–¥–∞—é —Ü–µ–ø–ª—è—é—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        ‚Ä¢ –ü–æ–¥–±–∏—Ä–∞—é –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —Ö–µ—à—Ç–µ–≥–∏
        ‚Ä¢ –ü–∏—à—É —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–µ bullet-points
        
        –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:
        """
        
        let keyboard = createCategoryKeyboard()
        
        try await sendMessage(
            chatId: chatId,
            text: welcomeText,
            replyMarkup: keyboard
        )
    }
    
    private func handleHelpCommand(chatId: Int64) async throws {
        let helpText = """
        üìñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:
        
        1Ô∏è‚É£ –ù–∞–∂–º–∏ /generate –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        2Ô∏è‚É£ –û–ø–∏—à–∏ —Å–≤–æ–π —Ç–æ–≤–∞—Ä (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)
        3Ô∏è‚É£ –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞ 15 —Å–µ–∫—É–Ω–¥!
        
        üí° –ö–æ–º–∞–Ω–¥—ã:
        /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        /generate - –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        /balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫
        /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
        /cancel - –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
        
        ‚ùì –í–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏ @support_kartochka
        """
        
        try await sendMessage(chatId: chatId, text: helpText)
    }
    
    private func handleGenerateCommand(user: User, chatId: Int64) async throws {
        let repo = UserRepository(database: app.db)
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç
        guard try await repo.hasGenerationsAvailable(user) else {
            try await sendMessage(chatId: chatId, text: Constants.BotMessage.limitExceeded)
            return
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        let keyboard = createCategoryKeyboard()
        
        try await sendMessage(
            chatId: chatId,
            text: Constants.BotMessage.selectCategory,
            replyMarkup: keyboard
        )
    }
    
    private func handleBalanceCommand(user: User, chatId: Int64) async throws {
        let repo = UserRepository(database: app.db)
        let plan = try await repo.getCurrentPlan(user)
        let remaining = try await repo.getRemainingGenerations(user)
        let total = plan.generationsLimit
        
        let balanceText = Constants.BotMessage.subscriptionInfo(
            plan: plan,
            remaining: remaining,
            total: total
        )
        
        try await sendMessage(chatId: chatId, text: balanceText)
    }
    
    private func handleSubscribeCommand(user: User, chatId: Int64) async throws {
        let repo = UserRepository(database: app.db)
        let currentPlan = try await repo.getCurrentPlan(user)
        
        let subscribeText = """
        üíé *–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã –ö–∞—Ä—Ç–æ—á–∫–∞–ü–†–û*
        
        –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω: *\(currentPlan.name)*
        
        üì¶ *Starter* - 299‚ÇΩ/–º–µ—Å
        ‚Ä¢ 30 –æ–ø–∏—Å–∞–Ω–∏–π –≤ –º–µ—Å—è—Ü
        ‚Ä¢ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
        ‚Ä¢ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è 95% vs –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä!
        
        üöÄ *Business* - 599‚ÇΩ/–º–µ—Å
        ‚Ä¢ 150 –æ–ø–∏—Å–∞–Ω–∏–π –≤ –º–µ—Å—è—Ü
        ‚Ä¢ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
        ‚Ä¢ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        ‚Ä¢ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–ª–ª–µ—Ä–æ–≤
        
        üíº *Pro* - 999‚ÇΩ/–º–µ—Å
        ‚Ä¢ 500 –æ–ø–∏—Å–∞–Ω–∏–π –≤ –º–µ—Å—è—Ü
        ‚Ä¢ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
        ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        ‚Ä¢ –î–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Å–µ–ª–ª–µ—Ä–æ–≤ –∏ –∞–≥–µ–Ω—Ç—Å—Ç–≤
        
        ‚≠êÔ∏è *Ultra* - 1,499‚ÇΩ/–º–µ—Å
        ‚Ä¢ 1000 –æ–ø–∏—Å–∞–Ω–∏–π –≤ –º–µ—Å—è—Ü
        ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –§–û–¢–û üì∑
        ‚Ä¢ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
        ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
        ‚Ä¢ –î–ª—è power-—Å–µ–ª–ª–µ—Ä–æ–≤
        
        üí∞ *ROI:* 1 –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞ = 500‚ÇΩ
        –° –Ω–∞—à–∏–º –±–æ—Ç–æ–º = 10‚ÇΩ! –≠–∫–æ–Ω–æ–º–∏—è 98%!
        
        ‚ö†Ô∏è –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Tribute!
        –ü–æ–∫–∞ –º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Free –ø–ª–∞–Ω–æ–º (3 –æ–ø–∏—Å–∞–Ω–∏—è).
        
        –•–æ—á–µ—à—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å? –ò—Å–ø–æ–ª—å–∑—É–π /generate
        """
        
        try await sendMessage(chatId: chatId, text: subscribeText)
    }
    
    private func handleCancelCommand(user: User, chatId: Int64) async throws {
        // –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        let repo = UserRepository(database: app.db)
        try await repo.updateCategory(user, category: nil)
        
        try await sendMessage(
            chatId: chatId,
            text: "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
        )
    }
    
    // MARK: - Callback Handlers
    
    private func handleCallback(_ callback: TelegramCallbackQuery) async throws {
        guard let data = callback.data else { return }
        
        app.logger.info("üîò Callback from @\(callback.from.username ?? "unknown"): \(data)")
        
        let user = try await getOrCreateUser(from: callback.from, chatId: callback.message?.chat.id ?? callback.from.id)
        let chatId = callback.message?.chat.id ?? callback.from.id
        
        // –ü–∞—Ä—Å–∏–Ω–≥ callback data
        guard let callbackData = CallbackData(rawValue: data) else {
            app.logger.warning("‚ö†Ô∏è Unknown callback data: \(data)")
            try await answerCallback(callbackId: callback.id, text: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            return
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ switch
        switch callbackData {
        case .category(let categoryRaw):
            try await handleCategorySelected(category: categoryRaw, user: user, chatId: chatId)
            
        case .newGeneration:
            try await handleGenerateCommand(user: user, chatId: chatId)
            
        case .myBalance:
            try await handleBalanceCommand(user: user, chatId: chatId)
            
        case .exportLast:
            try await handleExportLast(user: user, chatId: chatId)
            
        case .buyPlan(let plan):
            try await handleBuyPlan(plan: plan, user: user, chatId: chatId)
        }
        
        // –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å callback
        try await answerCallback(callbackId: callback.id)
    }
    
    private func handleCategorySelected(category: String, user: User, chatId: Int64) async throws {
        let repo = UserRepository(database: app.db)
        
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        try await repo.updateCategory(user, category: category)
        
        guard let productCategory = Constants.ProductCategory(rawValue: category) else {
            return
        }
        
        let text = """
        ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞: \(productCategory.displayName)
        
        \(Constants.BotMessage.enterProductInfo)
        """
        
        try await sendMessage(chatId: chatId, text: text)
    }
    
    // MARK: - Product Description Generation
    
    private func handleProductDescription(text: String, user: User, chatId: Int64) async throws {
        let repo = UserRepository(database: app.db)
        
        app.logger.info("üü¢ Starting product description generation")
        app.logger.info("  User: \(user.telegramId)")
        app.logger.info("  Text: \(text)")
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞
        guard let categoryRaw = user.selectedCategory,
              let category = Constants.ProductCategory(rawValue: categoryRaw) else {
            app.logger.warning("‚ö†Ô∏è Category not selected for user \(user.telegramId)")
            try await sendMessage(
                chatId: chatId,
                text: "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ /start"
            )
            return
        }
        
        app.logger.info("  Category: \(category.name)")
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        let remaining = try await repo.getRemainingGenerations(user)
        app.logger.info("  Remaining generations: \(remaining)")
        
        guard try await repo.hasGenerationsAvailable(user) else {
            app.logger.warning("‚ö†Ô∏è User \(user.telegramId) exceeded limit")
            try await sendMessage(chatId: chatId, text: Constants.BotMessage.limitExceeded)
            return
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å "–ì–µ–Ω–µ—Ä–∏—Ä—É—é..."
        try await sendMessage(chatId: chatId, text: Constants.BotMessage.generating)
        
        do {
            app.logger.info("üü¢ Calling Claude API...")
            
            // –í—ã–∑–≤–∞—Ç—å Claude API
            let description = try await app.claude.generateProductDescription(
                productInfo: text,
                category: category
            )
            
            app.logger.info("üü¢ Claude API responded successfully")
            app.logger.info("  Tokens used: \(description.tokensUsed)")
            app.logger.info("  Processing time: \(description.processingTimeMs)ms")
            app.logger.info("  Title: \(description.title)")
            
            // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
            app.logger.info("üü¢ Saving to database...")
            
            let generation = Generation(
                userId: user.id!,
                category: category.rawValue,
                productName: text,
                productDetails: text,
                tokensUsed: description.tokensUsed,
                processingTimeMs: description.processingTimeMs
            )
            generation.resultTitle = description.title
            generation.resultDescription = description.description
            generation.resultBullets = description.bullets
            generation.resultHashtags = description.hashtags
            
            try await generation.save(on: app.db)
            app.logger.info("üü¢ Saved to database: \(generation.id?.uuidString ?? "unknown")")
            
            // –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
            try await repo.incrementGenerations(user)
            app.logger.info("üü¢ Incremented user counter. Used: \(user.generationsUsed + 1)")
            
            // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            app.logger.info("üü¢ Sending result to user...")
            try await sendGenerationResult(
                chatId: chatId,
                description: description,
                user: user
            )
            
            app.logger.info("‚úÖ Successfully generated description for user \(user.telegramId) in \(description.processingTimeMs)ms")
            
        } catch {
            app.logger.error("‚ùå Generation error: \(error)")
            app.logger.error("‚ùå Error type: \(type(of: error))")
            app.logger.error("‚ùå Error description: \(String(describing: error))")
            
            try await sendMessage(chatId: chatId, text: Constants.BotMessage.error)
        }
    }
    
    private func sendGenerationResult(
        chatId: Int64,
        description: ClaudeService.ProductDescription,
        user: User
    ) async throws {
        let repo = UserRepository(database: app.db)
        let remaining = try await repo.getRemainingGenerations(user)
        
        let bulletsText = description.bullets.map { "‚Ä¢ \($0)" }.joined(separator: "\n")
        let hashtagsText = description.hashtags.joined(separator: " ")
        
        let resultText = """
        ‚úÖ *–ì–æ—Ç–æ–≤–æ!* –í–æ—Ç —Ç–≤–æ—ë –æ–ø–∏—Å–∞–Ω–∏–µ:
        
        üìù *–ó–∞–≥–æ–ª–æ–≤–æ–∫:*
        \(description.title)
        
        üìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:*
        \(description.description)
        
        üéØ *–ö–ª—é—á–µ–≤—ã–µ –≤—ã–≥–æ–¥—ã:*
        \(bulletsText)
        
        üè∑ *–•–µ—à—Ç–µ–≥–∏:*
        \(hashtagsText)
        
        ‚ö°Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: *\(remaining)*
        """
        
        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        let keyboard = TelegramReplyMarkup(inlineKeyboard: [
            [
                TelegramInlineKeyboardButton(text: "üîÑ –ù–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", callbackData: "new_generation"),
                TelegramInlineKeyboardButton(text: "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callbackData: "my_balance")
            ],
            [
                TelegramInlineKeyboardButton(text: "üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª", callbackData: "export_last")
            ]
        ])
        
        try await sendMessage(chatId: chatId, text: resultText, replyMarkup: keyboard)
    }
    
    // MARK: - Photo Description Generation
    
    private func handlePhotoDescription(
        photos: [TelegramPhotoSize],
        caption: String?,
        user: User,
        chatId: Int64
    ) async throws {
        let repo = UserRepository(database: app.db)
        let plan = try await repo.getCurrentPlan(user)
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ Ultra –ø–æ–¥–ø–∏—Å–∫–∏ (—Ñ–æ—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è Ultra)
        guard plan == .ultra else {
            let upgradeText = """
            üì∑ *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ñ–æ—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Ultra!*
            
            –° Ultra –ø–æ–¥–ø–∏—Å–∫–æ–π —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å:
            ‚Ä¢ ‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º —Ç–æ–≤–∞—Ä–∞
            ‚Ä¢ üöÄ 1000 –æ–ø–∏—Å–∞–Ω–∏–π –≤ –º–µ—Å—è—Ü
            ‚Ä¢ ‚ö°Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            ‚Ä¢ üéØ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
            
            –¶–µ–Ω–∞: *1,499‚ÇΩ/–º–µ—Å*
            
            –•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é? –ò—Å–ø–æ–ª—å–∑—É–π /start
            """
            
            let keyboard = TelegramReplyMarkup(inlineKeyboard: [
                [TelegramInlineKeyboardButton(text: "‚≠êÔ∏è –ö—É–ø–∏—Ç—å Ultra", callbackData: "buy_ultra")]
            ])
            
            try await sendMessage(chatId: chatId, text: upgradeText, replyMarkup: keyboard)
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞
        guard let categoryRaw = user.selectedCategory,
              let category = Constants.ProductCategory(rawValue: categoryRaw) else {
            try await sendMessage(
                chatId: chatId,
                text: "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ /start"
            )
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        guard try await repo.hasGenerationsAvailable(user) else {
            try await sendMessage(chatId: chatId, text: Constants.BotMessage.limitExceeded)
            return
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ..."
        try await sendMessage(chatId: chatId, text: "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 15-20 —Å–µ–∫—É–Ω–¥.")
        
        do {
            // –ü–æ–ª—É—á–∏—Ç—å —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            guard let largestPhoto = photos.max(by: { $0.fileSize ?? 0 < $1.fileSize ?? 0 }) else {
                throw BotError.telegramAPIError(.badRequest)
            }
            
            // –°–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ
            let imageData = try await downloadPhoto(fileId: largestPhoto.fileId)
            
            // –í—ã–∑–≤–∞—Ç—å Claude Vision API
            let additionalContext = caption ?? "–¢–æ–≤–∞—Ä –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"
            let description = try await app.claude.generateProductDescriptionFromPhoto(
                imageData: imageData,
                productInfo: additionalContext,
                category: category
            )
            
            // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
            let generation = Generation(
                userId: user.id!,
                category: category.rawValue,
                productName: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ñ–æ—Ç–æ",
                productDetails: additionalContext,
                tokensUsed: description.tokensUsed,
                processingTimeMs: description.processingTimeMs
            )
            generation.resultTitle = description.title
            generation.resultDescription = description.description
            generation.resultBullets = description.bullets
            generation.resultHashtags = description.hashtags
            
            try await generation.save(on: app.db)
            
            // –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
            try await repo.incrementGenerations(user)
            
            // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try await sendGenerationResult(
                chatId: chatId,
                description: description,
                user: user
            )
            
            app.logger.info("‚úÖ Generated description from photo for user \(user.telegramId)")
            
        } catch {
            app.logger.error("‚ùå Photo generation error: \(error)")
            try await sendMessage(chatId: chatId, text: Constants.BotMessage.error)
        }
    }
    
    private func downloadPhoto(fileId: String) async throws -> Data {
        // –ü–æ–ª—É—á–∏—Ç—å file_path —á–µ—Ä–µ–∑ getFile API
        struct GetFileResponse: Content {
            let ok: Bool
            let result: FileInfo
        }
        
        struct FileInfo: Content {
            let filePath: String
            
            enum CodingKeys: String, CodingKey {
                case filePath = "file_path"
            }
        }
        
        let uri = URI(string: "\(baseURL)/getFile")
        
        let response = try await app.client.post(uri) { req in
            try req.content.encode(["file_id": fileId])
        }
        
        guard response.status == .ok else {
            throw BotError.telegramAPIError(response.status)
        }
        
        let fileResponse = try response.content.decode(GetFileResponse.self)
        
        // –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
        let fileURL = "https://api.telegram.org/file/bot\(botToken)/\(fileResponse.result.filePath)"
        let fileUri = URI(string: fileURL)
        
        let fileDataResponse = try await app.client.get(fileUri)
        
        guard fileDataResponse.status == .ok,
              let buffer = fileDataResponse.body else {
            throw BotError.telegramAPIError(.notFound)
        }
        
        return Data(buffer: buffer)
    }
    
    // MARK: - Export & Buy Handlers
    
    private func handleExportLast(user: User, chatId: Int64) async throws {
        // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        let lastGeneration = try await Generation.query(on: app.db)
            .filter(\.$user.$id == user.id!)
            .sort(\.$createdAt, .descending)
            .first()
        
        guard let generation = lastGeneration,
              let title = generation.resultTitle,
              let description = generation.resultDescription,
              let bullets = generation.resultBullets,
              let hashtags = generation.resultHashtags else {
            try await sendMessage(
                chatId: chatId,
                text: "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–ø–∏—Å–∞–Ω–∏–µ!"
            )
            return
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        let bulletsText = bullets.map { "‚Ä¢ \($0)" }.joined(separator: "\n")
        let hashtagsText = hashtags.joined(separator: " ")
        
        let fileContent = """
        üìù –û–ü–ò–°–ê–ù–ò–ï –¢–û–í–ê–†–ê
        –°–æ–∑–¥–∞–Ω–æ: –ö–∞—Ä—Ç–æ—á–∫–∞–ü–†–û AI Bot
        –î–∞—Ç–∞: \(generation.createdAt?.formatted() ?? "")
        
        ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        
        –ó–ê–ì–û–õ–û–í–û–ö:
        \(title)
        
        ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        
        –û–ü–ò–°–ê–ù–ò–ï:
        \(description)
        
        ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        
        –ö–õ–Æ–ß–ï–í–´–ï –í–´–ì–û–î–´:
        \(bulletsText)
        
        ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        
        –•–ï–®–¢–ï–ì–ò:
        \(hashtagsText)
        
        ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        
        –ö–∞—Ç–µ–≥–æ—Ä–∏—è: \(generation.category)
        –¢–æ–∫–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: \(generation.tokensUsed)
        –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: \(generation.processingTimeMs)ms
        
        –°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ @kartochka_pro_bot
        """
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        try await sendDocument(
            chatId: chatId,
            content: fileContent,
            filename: "opisanie_\(generation.id?.uuidString.prefix(8) ?? "export").txt",
            caption: "üìÑ –¢–≤–æ—ë –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!"
        )
        
        app.logger.info("‚úÖ Exported generation \(generation.id?.uuidString ?? "unknown") for user \(user.telegramId)")
    }
    
    private func handleBuyPlan(plan: String, user: User, chatId: Int64) async throws {
        // –ü–æ–∫–∞ Tribute –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        let buyText = """
        üíé *–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ \(plan.capitalized)*
        
        ‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ–ø–ª–∞—Ç—ã –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!
        
        –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:
        ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Tribute
        ‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        ‚Ä¢ –ê–≤—Ç–æ—Ä–µ–Ω–µ–≤ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
        
        –ê –ø–æ–∫–∞ –ø–æ–ª—å–∑—É–π—Å—è Free –ø–ª–∞–Ω–æ–º (3 –æ–ø–∏—Å–∞–Ω–∏—è).
        
        –•–æ—á–µ—à—å –±–æ–ª—å—à–µ –æ–ø–∏—Å–∞–Ω–∏–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?
        –ù–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @vskamnev
        """
        
        try await sendMessage(chatId: chatId, text: buyText)
    }
    
    // MARK: - Helpers
    
    private func getOrCreateUser(from telegramUser: TelegramUser, chatId: Int64) async throws -> User {
        let repo = UserRepository(database: app.db)
        return try await repo.getOrCreate(
            telegramId: telegramUser.id,
            username: telegramUser.username,
            firstName: telegramUser.firstName,
            lastName: telegramUser.lastName
        )
    }
    
    private func createCategoryKeyboard() -> TelegramReplyMarkup {
        let categories = Constants.ProductCategory.allCases
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
        var rows: [[TelegramInlineKeyboardButton]] = []
        var currentRow: [TelegramInlineKeyboardButton] = []
        
        for category in categories {
            let button = TelegramInlineKeyboardButton(
                text: category.displayName,
                callbackData: "category_\(category.rawValue)"
            )
            currentRow.append(button)
            
            if currentRow.count == 2 {
                rows.append(currentRow)
                currentRow = []
            }
        }
        
        // –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫
        if !currentRow.isEmpty {
            rows.append(currentRow)
        }
        
        return TelegramReplyMarkup(inlineKeyboard: rows)
    }
    
    // MARK: - Telegram API
    
    func sendMessage(
        chatId: Int64,
        text: String,
        parseMode: String = "Markdown",
        replyMarkup: TelegramReplyMarkup? = nil
    ) async throws {
        let uri = URI(string: "\(baseURL)/sendMessage")
        
        let response = try await app.client.post(uri) { req in
            try req.content.encode(TelegramSendMessage(
                chatId: chatId,
                text: text,
                parseMode: parseMode,
                replyMarkup: replyMarkup
            ))
        }
        
        guard response.status == HTTPResponseStatus.ok else {
            throw BotError.telegramAPIError(response.status)
        }
    }
    
    private func answerCallback(callbackId: String, text: String? = nil) async throws {
        struct AnswerCallbackQuery: Content {
            let callback_query_id: String
            let text: String?
        }
        
        let uri = URI(string: "\(baseURL)/answerCallbackQuery")
        
        _ = try await app.client.post(uri) { req in
            try req.content.encode(AnswerCallbackQuery(
                callback_query_id: callbackId,
                text: text
            ))
        }
    }
    
    private func sendDocument(
        chatId: Int64,
        content: String,
        filename: String,
        caption: String? = nil
    ) async throws {
        // –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        let tempDir = FileManager.default.temporaryDirectory
        let fileURL = tempDir.appendingPathComponent(filename)
        
        try content.write(to: fileURL, atomically: true, encoding: .utf8)
        
        defer {
            try? FileManager.default.removeItem(at: fileURL)
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram API
        let uri = URI(string: "\(baseURL)/sendDocument")
        
        let response = try await app.client.post(uri) { req in
            let boundary = UUID().uuidString
            req.headers.contentType = HTTPMediaType(type: "multipart", subType: "form-data", parameters: ["boundary": boundary])
            
            var body = ByteBuffer()
            
            // chat_id
            body.writeString("--\(boundary)\r\n")
            body.writeString("Content-Disposition: form-data; name=\"chat_id\"\r\n\r\n")
            body.writeString("\(chatId)\r\n")
            
            // document (file)
            body.writeString("--\(boundary)\r\n")
            body.writeString("Content-Disposition: form-data; name=\"document\"; filename=\"\(filename)\"\r\n")
            body.writeString("Content-Type: text/plain\r\n\r\n")
            
            let fileData = try Data(contentsOf: fileURL)
            body.writeData(fileData)
            body.writeString("\r\n")
            
            // caption
            if let caption = caption {
                body.writeString("--\(boundary)\r\n")
                body.writeString("Content-Disposition: form-data; name=\"caption\"\r\n\r\n")
                body.writeString(caption)
                body.writeString("\r\n")
            }
            
            body.writeString("--\(boundary)--\r\n")
            
            req.body = body
        }
        
        guard response.status == HTTPResponseStatus.ok else {
            throw BotError.telegramAPIError(response.status)
        }
    }
    
    // MARK: - Errors
    
    enum BotError: Error {
        case telegramAPIError(HTTPResponseStatus)
        case userNotFound
        case limitExceeded
    }
    
    // MARK: - Callback Data
    
    enum CallbackData {
        case category(String)
        case newGeneration
        case myBalance
        case exportLast
        case buyPlan(String)
        
        init?(rawValue: String) {
            if rawValue.starts(with: "category_") {
                let category = String(rawValue.dropFirst("category_".count))
                self = .category(category)
            } else if rawValue == "new_generation" {
                self = .newGeneration
            } else if rawValue == "my_balance" {
                self = .myBalance
            } else if rawValue == "export_last" {
                self = .exportLast
            } else if rawValue.starts(with: "buy_") {
                let plan = String(rawValue.dropFirst("buy_".count))
                self = .buyPlan(plan)
            } else {
                return nil
            }
        }
    }
}

// MARK: - Application Extension

extension Application {
    private struct TelegramBotServiceKey: StorageKey {
        typealias Value = TelegramBotService
    }
    
    var telegramBot: TelegramBotService {
        get {
            guard let service = storage[TelegramBotServiceKey.self] else {
                fatalError("TelegramBotService not configured")
            }
            return service
        }
        set {
            storage[TelegramBotServiceKey.self] = newValue
        }
    }
}


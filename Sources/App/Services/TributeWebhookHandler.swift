import Vapor
import Fluent

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Tribute
/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
final class TributeWebhookHandler {
    private let app: Application
    
    init(app: Application) {
        self.app = app
    }
    
    enum HandlerError: Error {
        case duplicateEvent
        case userNotFound
        case planNotIdentified
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    func handle(_ event: NormalizedWebhookEvent, on req: Request) async throws {
        req.logger.info("üí∞ Processing webhook: type=\(event.type) userId=\(event.telegramUserId) eventId=\(event.id)")
        
        try await checkDuplicates(event, on: req)
        
        switch event.type {
        case .digitalProductPurchase:
            try await handleDigitalProductPurchase(event, on: req)
        case .unknown:
            req.logger.warning("‚ö†Ô∏è Unknown event type, skipping")
        }
        
        try await saveProcessedEvent(event, on: req)
    }
    
    // MARK: - Private Methods
    
    private func checkDuplicates(_ event: NormalizedWebhookEvent, on req: Request) async throws {
        let duplicate = try await ProcessedWebhook.query(on: req.db)
            .filter(\.$eventId == event.id)
            .first()
        
        if duplicate != nil {
            req.logger.info("‚è≠Ô∏è Duplicate webhook detected: \(event.id)")
            
            app.monitoring.trackPayment(
                userId: event.telegramUserId,
                amount: event.amount,
                plan: "unknown",
                success: true,
                isDuplicate: true
            )
            
            throw HandlerError.duplicateEvent
        }
    }
    
    private func handleDigitalProductPurchase(_ event: NormalizedWebhookEvent, on req: Request) async throws {
        guard let productId = event.productId else {
            req.logger.error("‚ùå Missing product_id in webhook")
            return
        }
        
        let plan = try identifyPlan(productId: productId, amount: event.amount)
        
        try await addCreditsToUser(
            telegramId: event.telegramUserId,
            plan: plan,
            on: req.db
        )
        
        app.monitoring.trackPayment(
            userId: event.telegramUserId,
            amount: event.amount,
            plan: plan.name,
            success: true,
            isDuplicate: false
        )
        
        try await notifyUser(
            telegramId: event.telegramUserId,
            plan: plan
        )
        
        req.logger.info("‚úÖ Purchase processed: user=\(event.telegramUserId) plan=\(plan.name) amount=\(event.amount/100)‚ÇΩ")
    }
    
    private func identifyPlan(productId: Int, amount: Int) throws -> Constants.SubscriptionPlan {
        // –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–æ product_id
        if let plan = Constants.SubscriptionPlan.allCases.first(where: {
            $0.tributeProductId == String(productId)
        }) {
            return plan
        }
        
        // –í–∞—Ä–∏–∞–Ω—Ç 2: –ü–æ —Å—É–º–º–µ (fallback)
        let amountRub = amount / 100
        if let plan = Constants.SubscriptionPlan.allCases.first(where: {
            Int(truncating: $0.price as NSNumber) == amountRub
        }) {
            return plan
        }
        
        app.logger.error("‚ùå Cannot identify plan: productId=\(productId) amount=\(amount)")
        throw HandlerError.planNotIdentified
    }
    
    private func addCreditsToUser(
        telegramId: Int64,
        plan: Constants.SubscriptionPlan,
        on db: any Database
    ) async throws {
        try await db.transaction { transactionDb in
            guard let user = try await User.query(on: transactionDb)
                .filter(\.$telegramId == telegramId)
                .first() else {
                throw HandlerError.userNotFound
            }
            
            let creditsBefore = user.textCredits
            
            user.textCredits += plan.textGenerationsLimit
            user.photoCredits += plan.photoGenerationsLimit
            
            try await user.update(on: transactionDb)
            
            self.app.monitoring.trackCreditOperation(
                operation: .purchase,
                userId: telegramId,
                creditsBefore: creditsBefore,
                creditsAfter: user.textCredits,
                success: true
            )
            
            self.app.logger.info("‚úÖ Credits added: text=\(plan.textGenerationsLimit) photo=\(plan.photoGenerationsLimit) user=\(telegramId)")
        }
    }
    
    private func notifyUser(
        telegramId: Int64,
        plan: Constants.SubscriptionPlan
    ) async throws {
        let message = """
        ‚úÖ *–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!*
        
        üì¶ *–ü–∞–∫–µ—Ç:* \(plan.emoji) \(plan.name)
        üí∞ *–°—É–º–º–∞:* \(plan.price) ‚ÇΩ
        
        üéâ *–ù–∞—á–∏—Å–ª–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:*
        ‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ: +\(plan.textGenerationsLimit)
        ‚Ä¢ –° —Ñ–æ—Ç–æ: +\(plan.photoGenerationsLimit)
        
        –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤!
        
        –ò—Å–ø–æ–ª—å–∑—É–π /generate —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üöÄ
        """
        
        try await app.telegramBot.sendMessage(
            chatId: telegramId,
            text: message
        )
    }
    
    private func saveProcessedEvent(_ event: NormalizedWebhookEvent, on req: Request) async throws {
        let processed = ProcessedWebhook(
            eventId: event.id,
            eventType: event.type == .digitalProductPurchase ? "digital_product_purchase" : "unknown",
            userId: event.telegramUserId,
            amount: event.amount
        )
        try await processed.save(on: req.db)
    }
}


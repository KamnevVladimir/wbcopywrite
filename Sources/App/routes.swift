import Vapor

func routes(_ app: Application) throws {
    // MARK: - Health Check
    
    app.get("health") { req async -> Response in
        let response = Response(status: .ok)
        response.headers.contentType = .json
        response.body = .init(string: """
        {
            "status": "ok",
            "service": "–ö–∞—Ä—Ç–æ—á–∫–∞–ü–†–û",
            "version": "0.1.0",
            "environment": "\(app.environmentConfig.environment)"
        }
        """)
        return response
    }
    
    // MARK: - Root
    
    app.get { req async -> String in
        """
        üéØ –ö–∞—Ä—Ç–æ—á–∫–∞–ü–†–û API
        
        Telegram Bot: @kartochka_pro
        Mode: Long Polling
        Status: /health
        Version: 0.1.0
        """
    }
    
    // MARK: - Tribute Payment API
    
    /// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–ø—Ä–æ—Å–∞/–æ—Ç–≤–µ—Ç–∞
    struct CreatePaymentRequest: Content {
        let plan: String
        let telegramUserId: Int64
    }
    
    struct CreatePaymentResponse: Content {
        let paymentUrl: String
        let plan: String
        let amount: Int
    }
    
    /// POST /api/tribute/create-payment
    /// –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    app.post("api", "tribute", "create-payment") { req async throws -> CreatePaymentResponse in
        let body = try req.content.decode(CreatePaymentRequest.self)
        
        guard let plan = Constants.SubscriptionPlan(rawValue: body.plan) else {
            throw Abort(.badRequest, reason: "Unknown plan: \(body.plan)")
        }
        
        guard plan != .free else {
            throw Abort(.badRequest, reason: "Free plan cannot be purchased")
        }
        
        req.logger.info("üí≥ Creating payment: user=\(body.telegramUserId) plan=\(plan.rawValue)")
        
        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ TributeService
        let paymentUrl = try await req.application.tribute.createPaymentLink(
            plan: plan,
            telegramId: body.telegramUserId
        )
        
        return CreatePaymentResponse(
            paymentUrl: paymentUrl,
            plan: plan.name,
            amount: Int(truncating: plan.price as NSNumber)
        )
    }
    
    /// POST /api/tribute/webhook
    /// –í–µ–±—Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –æ—Ç Tribute
    /// üîí –ó–ê–©–ò–¢–ê: Secret token + IP whitelist + –¥—É–±–ª–∏–∫–∞—Ç—ã
    app.post("api", "tribute", "webhook") { req async throws -> HTTPStatus in
        // üîí –ó–ê–©–ò–¢–ê 1: Secret token –≤ URL –∏–ª–∏ header
        let secretToken = Environment.get("TRIBUTE_WEBHOOK_SECRET") ?? "change_me_in_production"
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ query –ø–∞—Ä–∞–º–µ—Ç—Ä–µ –ò–õ–ò –≤ header
        let providedToken = req.query[String.self, at: "secret"] 
                         ?? req.headers.first(name: "X-Webhook-Secret")
        
        if providedToken != secretToken {
            req.logger.warning("‚ö†Ô∏è Unauthorized webhook attempt from \(req.remoteAddress?.description ?? "unknown")")
            throw Abort(.unauthorized, reason: "Invalid webhook secret")
        }
        
        // üîí –ó–ê–©–ò–¢–ê 2: IP Whitelist (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        // Tribute –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP
        // let allowedIPs = ["34.123.45.67", "34.123.45.68"]
        // if let clientIP = req.remoteAddress?.ipAddress,
        //    !allowedIPs.contains(clientIP) {
        //     throw Abort(.forbidden)
        // }
        
        // –®–∞–≥ 1: –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        // Tribute –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø—É—Å—Ç—ã–º —Ç–µ–ª–æ–º —á–µ—Ä–µ–∑ UI.
        // –ï—Å–ª–∏ —Å–µ–∫—Ä–µ—Ç –≤–µ—Ä–Ω—ã–π, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ health‚Äëcheck –∏ –æ—Ç–≤–µ—á–∞–µ–º 200.
        guard let body = req.body.data else {
            req.logger.info("‚ÑπÔ∏è Tribute webhook ping without body ‚Äî OK")
            return .ok
        }
        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ª–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø –∏ –ø—Ä–µ–≤—å—é —Ç–µ–ª–∞ (–±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        let contentType = req.headers.first(name: "Content-Type") ?? ""
        let bodyString = String(buffer: body)
        let preview = bodyString.prefix(512)
        req.logger.info("‚ÑπÔ∏è Tribute webhook headers: Content-Type=\(contentType); body.len=\(body.readableBytes), preview=\(preview)")
        
        // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å HMAC –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ Tribute –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç)
        if let signature = req.headers.first(name: "X-Tribute-Signature") {
            let isValid = req.application.tribute.verifyWebhookSignature(
                payload: Data(buffer: body),
                signature: signature
            )
            
            if !isValid {
                req.logger.warning("‚ö†Ô∏è Invalid HMAC signature")
                throw Abort(.unauthorized, reason: "Invalid signature")
            }
            
            req.logger.info("‚úÖ HMAC signature verified")
        }
        
        // –®–∞–≥ 3: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
        do {
            // –ü–æ–ø—ã—Ç–∫–∞ 1: –æ–±—ã—á–Ω—ã–π JSON
            let event = try req.content.decode(TributeWebhookEvent.self)
            // üîí –ó–ê–©–ò–¢–ê 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (—É–∂–µ –≤–Ω—É—Ç—Ä–∏ handleWebhook)
            // –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ TributeService
            try await req.application.tribute.handleWebhook(event, on: req)
            return .ok
        } catch {
            // –ü–æ–ø—ã—Ç–∫–∞ 2: application/x-www-form-urlencoded —Å –ø–æ–ª–µ–º payload
            if contentType.contains("application/x-www-form-urlencoded") {
                struct FormEnvelope: Content { let id: String?; let type: String?; let payload: String?; let data: String? }
                if let form = try? req.content.decode(FormEnvelope.self) {
                    if let json = form.payload ?? form.data,
                       let jsonData = json.data(using: .utf8),
                       let nested = try? JSONDecoder().decode(TributeWebhookEvent.self, from: jsonData) {
                        try await req.application.tribute.handleWebhook(nested, on: req)
                        return .ok
                    }
                }
            }
            // –¢–µ—Å—Ç–æ–≤—ã–π/–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ 200, —á—Ç–æ–±—ã –æ–Ω–∏ —Å—á–∏—Ç–∞–ª–∏ –≤–µ–±—Ö—É–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–º
            req.logger.info("‚ÑπÔ∏è Tribute webhook test without payload ‚Äî returning 200. Error: \(error)")
            return .ok
        }
    }

    /// GET /api/tribute/webhook
    /// Health-check –æ—Ç Tribute UI "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
    app.get("api", "tribute", "webhook") { req async throws -> HTTPStatus in
        let secretToken = Environment.get("TRIBUTE_WEBHOOK_SECRET") ?? "change_me_in_production"
        let providedToken = req.query[String.self, at: "secret"]
                         ?? req.headers.first(name: "X-Webhook-Secret")
        if providedToken != secretToken {
            req.logger.warning("‚ö†Ô∏è Unauthorized webhook GET attempt from \(req.remoteAddress?.description ?? "unknown")")
            throw Abort(.unauthorized, reason: "Invalid webhook secret")
        }
        req.logger.info("‚úÖ Tribute webhook GET ping OK")
        return .ok
    }
    
    app.logger.info("üõ£Ô∏è  Routes configured (long polling mode)")
}
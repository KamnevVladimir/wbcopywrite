import Vapor

func routes(_ app: Application) throws {
    // MARK: - Health Check
    
    app.get("health") { req async -> Response in
        let response = Response(status: .ok)
        response.headers.contentType = .json
        response.body = .init(string: """
        {
            "status": "ok",
            "service": "–ö–∞—Ä—Ç–æ—á–∫–∞–ü–†–û",
            "version": "0.1.0",
            "environment": "\(app.environmentConfig.environment)"
        }
        """)
        return response
    }
    
    // MARK: - Root
    
    app.get { req async -> String in
        """
        üéØ –ö–∞—Ä—Ç–æ—á–∫–∞–ü–†–û API
        
        Telegram Bot: @kartochka_pro
        Mode: Long Polling
        Status: /health
        Version: 0.1.0
        """
    }
    
    // MARK: - Tribute minimal API
    struct CreatePaymentRequest: Content { let plan: String; let telegramUserId: Int64 }
    struct CreatePaymentResponse: Content { let paymentUrl: String }
    
    // –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã: –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä—è–º—É—é web —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç
    app.post("api", "tribute", "create-payment") { req async throws -> CreatePaymentResponse in
        let body = try req.content.decode(CreatePaymentRequest.self)
        guard let plan = Constants.SubscriptionPlan(rawValue: body.plan) else {
            throw Abort(.badRequest, reason: "Unknown plan")
        }
        guard !plan.tributeWebLink.isEmpty else {
            throw Abort(.badRequest, reason: "Plan is temporarily unavailable")
        }
        req.logger.info("üí≥ Create payment for user=\(body.telegramUserId) plan=\(plan.rawValue)")
        return CreatePaymentResponse(paymentUrl: plan.tributeWebLink)
    }
    
    // –í–µ–±—Ö—É–∫ –¥–ª—è Tribute (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞)
    app.post("api", "tribute", "webhook") { req async throws -> HTTPStatus in
        let event = try req.content.decode(TributeWebhookEvent.self)
        req.logger.info("üí∞ Tribute webhook: type=\(event.type) userId=\(event.data.userId)")
        
        if event.type == TributeWebhookEvent.EventType.paymentSucceeded.rawValue {
            // –ù–∞–π–¥—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ø–æ–ª–Ω–∏–º –∫—Ä–µ–¥–∏—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –æ–ø–∏—Å–∞–Ω–∏—é –ø–ª–∞—Ç–µ–∂–∞
            guard let telegramId = Int64(event.data.userId) else { return .ok }
            let repo = UserRepository(database: req.db)
            if let user = try await repo.find(telegramId: telegramId),
               let plan = Constants.SubscriptionPlan.allCases.first(where: { event.data.description?.contains($0.name) == true || event.data.description == $0.rawValue || $0.tributeProductId == event.data.subscriptionId }) {
                // –ü—Ä–∏–±–∞–≤–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã –ø–ª–∞–Ω–∞ –∫ —Ç–µ–∫—É—â–µ–º—É –±–∞–ª–∞–Ω—Å—É
                user.textCredits += plan.textGenerationsLimit
                user.photoCredits += plan.photoGenerationsLimit
                try await user.update(on: req.db)
                req.logger.info("‚úÖ Credits added: text=\(plan.textGenerationsLimit) photo=\(plan.photoGenerationsLimit) for user=\(telegramId)")
            }
        }
        return .ok
    }
    
    app.logger.info("üõ£Ô∏è  Routes configured (long polling mode)")
}
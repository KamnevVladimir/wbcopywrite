import Vapor

func routes(_ app: Application) throws {
    // MARK: - Health Check
    
    app.get("health") { req async -> Response in
        let response = Response(status: .ok)
        response.headers.contentType = .json
        response.body = .init(string: """
        {
            "status": "ok",
            "service": "–ö–∞—Ä—Ç–æ—á–∫–∞–ü–†–û",
            "version": "0.1.0",
            "environment": "\(app.environmentConfig.environment)"
        }
        """)
        return response
    }
    
    // MARK: - Root
    
    app.get { req async -> String in
        """
        üéØ –ö–∞—Ä—Ç–æ—á–∫–∞–ü–†–û API
        
        Telegram Bot: @kartochka_pro
        Mode: Long Polling
        Status: /health
        Version: 0.1.0
        """
    }
    
    // MARK: - Tribute Payment API
    
    /// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–ø—Ä–æ—Å–∞/–æ—Ç–≤–µ—Ç–∞
    struct CreatePaymentRequest: Content {
        let plan: String
        let telegramUserId: Int64
    }
    
    struct CreatePaymentResponse: Content {
        let paymentUrl: String
        let plan: String
        let amount: Int
    }
    
    /// POST /api/tribute/create-payment
    /// –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    app.post("api", "tribute", "create-payment") { req async throws -> CreatePaymentResponse in
        let body = try req.content.decode(CreatePaymentRequest.self)
        
        guard let plan = Constants.SubscriptionPlan(rawValue: body.plan) else {
            throw Abort(.badRequest, reason: "Unknown plan: \(body.plan)")
        }
        
        guard plan != .free else {
            throw Abort(.badRequest, reason: "Free plan cannot be purchased")
        }
        
        req.logger.info("üí≥ Creating payment: user=\(body.telegramUserId) plan=\(plan.rawValue)")
        
        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ TributeService
        let paymentUrl = try await req.application.tribute.createPaymentLink(
            plan: plan,
            telegramId: body.telegramUserId
        )
        
        return CreatePaymentResponse(
            paymentUrl: paymentUrl,
            plan: plan.name,
            amount: plan.price
        )
    }
    
    /// POST /api/tribute/webhook
    /// –í–µ–±—Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –æ—Ç Tribute
    app.post("api", "tribute", "webhook") { req async throws -> HTTPStatus in
        // –®–∞–≥ 1: –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏
        guard let body = req.body.data else {
            throw Abort(.badRequest, reason: "Empty body")
        }
        
        // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ Tribute –µ—ë –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç)
        if let signature = req.headers.first(name: "X-Tribute-Signature") {
            let isValid = req.application.tribute.verifyWebhookSignature(
                payload: body,
                signature: signature
            )
            
            if !isValid {
                req.logger.warning("‚ö†Ô∏è Invalid webhook signature")
                throw Abort(.unauthorized, reason: "Invalid signature")
            }
            
            req.logger.info("‚úÖ Webhook signature verified")
        }
        
        // –®–∞–≥ 3: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
        let event = try req.content.decode(TributeWebhookEvent.self)
        
        // –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ TributeService
        try await req.application.tribute.handleWebhook(event, on: req)
        
        return .ok
    }
    
    app.logger.info("üõ£Ô∏è  Routes configured (long polling mode)")
}